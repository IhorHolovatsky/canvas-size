{"version":3,"file":"canvas-size.js","sources":["../src/canvas-test.js","../src/index.js"],"sourcesContent":["/* eslint-env browser, worker */\n\n/**\n * Tests ability to read pixel data from canvas elements of various dimensions\n * by decreasing canvas height and/or width until a test succeeds.\n *\n * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n * IMPORTANT: ONLY USE ES5 CODE IN THIS FUNCTION (I.E. NO BABEL TRANSPILATION)\n *            This function will be used both on the main thread and as part of\n *            an inline web worker. If this code is transpiled from ES6+ to ES5,\n *            the main thread will have access to Babel's helper functions but\n *            the web worker scope will.\n * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n *\n * @param {object} settings\n * @param {number[][]} settings.sizes\n * @param {function} settings.onError\n * @param {function} settings.onSuccess\n */\nfunction canvasTest(settings) {\n    const size     = settings.sizes.shift();\n    const width    = size[0];\n    const height   = size[1];\n    const fill     = [width - 1, height - 1, 1, 1]; // x, y, width, height\n    const job      = Date.now();\n    const isWorker = typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope;\n\n    let cropCvs, testCvs;\n\n    if (isWorker) {\n        cropCvs = new OffscreenCanvas(1, 1);\n        testCvs = new OffscreenCanvas(width, height);\n    }\n    else {\n        cropCvs = document.createElement('canvas');\n        cropCvs.width = 1;\n        cropCvs.height = 1;\n        testCvs = document.createElement('canvas');\n        testCvs.width = width;\n        testCvs.height = height;\n    }\n\n    const cropCtx = cropCvs.getContext('2d');\n    const testCtx = testCvs.getContext('2d');\n\n    testCtx.fillRect.apply(testCtx, fill);\n\n    // Render the test pixel in the bottom-right corner of the\n    // test canvas in the top-left of the 1x1 crop canvas. This\n    // dramatically reducing the time for getImageData to complete.\n    cropCtx.drawImage(testCvs, width - 1, width - 1, 1, 1, 0, 0, 1, 1);\n\n    // Verify image data (Pass = 255, Fail = 0)\n    const isTestPass = cropCtx.getImageData(0, 0, 1, 1).data[3] !== 0;\n    const benchmark  = Date.now() - job; // milliseconds\n\n    // Running in a web worker\n    if (isWorker) {\n        postMessage({\n            width,\n            height,\n            benchmark,\n            isTestPass\n        });\n\n        if (!isTestPass && settings.sizes.length) {\n            canvasTest(settings);\n        }\n    }\n    else if (isTestPass) {\n        settings.onSuccess(width, height, benchmark);\n    }\n    else {\n        settings.onError(width, height, benchmark);\n\n        if (settings.sizes.length) {\n            canvasTest(settings);\n        }\n    }\n\n    return isTestPass;\n}\n\nexport default canvasTest;\n","import canvasTest from './canvas-test';\n\n// Constants & Variables\n// =============================================================================\nconst defaults = {\n    max       : null,\n    min       : 1,\n    sizes     : [],\n    step      : 1024,\n    usePromise: false,\n    useWorker : false,\n    // Callbacks\n    onError   : Function.prototype,\n    onSuccess : Function.prototype\n};\nconst testSizes = {\n    area: [\n        // Future Browsers?\n        32767,\n        // Chrome 70 (Mac, Win)\n        // Chrome 68 (Android 4.4)\n        // Edge 17 (Win)\n        // Safari 7-12 (Mac)\n        16384,\n        // Chrome 68 (Android 7.1-9)\n        14188,\n        // Chrome 68 (Android 5),\n        11402,\n        // Chrome 68 (Android 6)\n        10836,\n        // Firefox 63 (Mac, Win)\n        11180,\n        // IE 9-11 (Win)\n        8192,\n        // IE Mobile (Windows Phone 8.x)\n        // Safari (iOS 9 - 12)\n        4096,\n        // Failed\n        defaults.min\n    ],\n    height: [\n        // Safari 7-12 (Mac)\n        // Safari (iOS 9-12)\n        8388607,\n        // Chrome 83 (Mac, Win)\n        65535,\n        // Chrome 70 (Mac, Win)\n        // Chrome 68 (Android 4.4-9)\n        // Firefox 63 (Mac, Win)\n        32767,\n        // IE11\n        // Edge 17 (Win)\n        16384,\n        // IE 9-10 (Win)\n        8192,\n        // IE Mobile (Windows Phone 8.x)\n        4096,\n        // Failed\n        defaults.min\n    ],\n    width: [\n        // Safari 7-12 (Mac)\n        // Safari (iOS 9-12)\n        4194303,\n        // Chrome 83 (Mac, Win)\n        65535,\n        // Chrome 70 (Mac, Win)\n        // Chrome 68 (Android 4.4-9)\n        // Firefox 63 (Mac, Win)\n        32767,\n        // IE11\n        // Edge 17 (Win)\n        16384,\n        // IE 9-10 (Win)\n        8192,\n        // IE Mobile (Windows Phone 8.x)\n        4096,\n        // Failed\n        defaults.min\n    ]\n};\nconst workerJobs = {\n    // jobID: {\n    //     onError: fn(),\n    //     onSuccess: fn()\n    // }\n};\n\n\n// Functions (Private)\n// =============================================================================\n/**\n * Creates a 2d array of canvas dimensions either from the default testSizes\n * object or the width/height/min/step values provided.\n *\n * @param   {object} settings\n * @param   {number} settings.width\n * @param   {number} settings.height\n * @param   {number} settings.min\n * @param   {number} settings.step\n * @param   {number[][]} settings.sizes\n * @returns {number[][]}\n */\nfunction createSizesArray(settings) {\n    const isArea   = settings.width === settings.height;\n    const isWidth  = settings.height === 1;\n    const isHeight = settings.width === 1;\n    const sizes    = [];\n\n    // Use settings.sizes\n    if (!settings.width || !settings.height) {\n        settings.sizes.forEach(testSize => {\n            const width  = isArea || isWidth ? testSize : 1;\n            const height = isArea || isHeight ? testSize : 1;\n\n            sizes.push([width, height]);\n        });\n    }\n    // Generate sizes from width, height, and step\n    else {\n        const testMin  = settings.min || defaults.min;\n        const testStep = settings.step || defaults.step;\n        let   testSize = Math.max(settings.width, settings.height);\n\n        while (testSize >= testMin) {\n            const width  = isArea || isWidth ? testSize : 1;\n            const height = isArea || isHeight ? testSize : 1;\n\n            sizes.push([width, height]);\n            testSize -= testStep;\n        }\n    }\n\n    return sizes;\n}\n\n/**\n * Handles calls from maxArea(), maxHeight(), maxWidth(), and test() methods.\n *\n * @param {object} settings\n * @param {number[][]} settings.sizes\n * @param {function} settings.onError\n * @param {function} settings.onSuccess\n */\nfunction handleMethod(settings) {\n    const hasCanvasSupport = window && window.HTMLCanvasElement;\n    const jobID            = Date.now();\n\n    /* istanbul ignore if */\n    if (!hasCanvasSupport) {\n        return false;\n    }\n\n    // Web Worker\n    if (settings.useWorker && window && ('OffscreenCanvas' in window)) {\n        const js = `\n            ${canvasTest.toString()}\n            onmessage = function(e) {\n                canvasTest(e.data);\n            };\n        `;\n        const blob    = new Blob([js], { type: 'application/javascript' });\n        const blobURL = URL.createObjectURL(blob);\n        const worker  = new Worker(blobURL);\n        const { onError, onSuccess, ...workerSettings } = settings;\n\n        URL.revokeObjectURL(blobURL);\n\n        // Store callbacks in workerJobs object\n        workerJobs[jobID] = { onError, onSuccess };\n\n        // Listen for messages from worker\n        worker.onmessage = function(e) {\n            const { width, height, benchmark, isTestPass } = e.data;\n\n            if (isTestPass) {\n                workerJobs[jobID].onSuccess(width, height, benchmark);\n\n                delete workerJobs[jobID];\n            }\n            else {\n                workerJobs[jobID].onError(width, height, benchmark);\n            }\n        };\n\n        // Send message to work\n        worker.postMessage(workerSettings);\n    }\n    // Promise\n    else if (settings.usePromise) {\n        return new Promise((resolve, reject) => {\n            // Modify callbacks resolve/reject Promise\n            const newSettings = Object.assign({}, settings, {\n                onError(width, height, benchmark) {\n                    /* istanbul ignore else */\n                    if (settings.onError) {\n                        settings.onError(width, height, benchmark);\n                    }\n                    if (settings.sizes.length === 0) {\n                        reject({ width, height, benchmark });\n                    }\n                },\n                onSuccess(width, height, benchmark) {\n                    /* istanbul ignore else */\n                    if (settings.onSuccess) {\n                        settings.onSuccess(width, height, benchmark);\n                    }\n\n                    resolve({ width, height, benchmark });\n                }\n            });\n\n            canvasTest(newSettings);\n        });\n    }\n    // Standard Callbacks\n    else {\n        return canvasTest(settings);\n    }\n}\n\n\n// Methods\n// =============================================================================\nconst canvasSize = {\n    /**\n     * Determines maximum area of an HTML canvas element. When `max` is\n     * unspecified, an optimized test will be performed using known maximum\n     * values from a variety of browsers and platforms.\n     *\n     * @param {object} [options]\n     * @param {number} [options.max]\n     * @param {number} [options.min=1]\n     * @param {number} [options.step=1024]\n     * @param {boolean} [options.usePromise=false]\n     * @param {function} [options.onError]\n     * @param {function} [options.onSuccess]\n     */\n    maxArea(options = {}) {\n        const sizes = createSizesArray({\n            width : options.max,\n            height: options.max,\n            min   : options.min,\n            step  : options.step,\n            sizes : [...testSizes.area]\n        });\n        const settings = Object.assign({}, defaults, options, { sizes });\n\n        return handleMethod(settings);\n    },\n\n    /**\n     * Determines maximum height of an HTML canvas element. When `max` is\n     * unspecified, an optimized test will be performed using known maximum\n     * values from a variety of browsers and platforms.\n     *\n     * @param {object} [options]\n     * @param {number} [options.max]\n     * @param {number} [options.min=1]\n     * @param {number} [options.step=1024]\n     * @param {boolean} [options.usePromise=false]\n     * @param {function} [options.onError]\n     * @param {function} [options.onSuccess]\n     */\n    maxHeight(options = {}) {\n        const sizes = createSizesArray({\n            width : 1,\n            height: options.max,\n            min   : options.min,\n            step  : options.step,\n            sizes : [...testSizes.height]\n        });\n        const settings = Object.assign({}, defaults, options, { sizes });\n\n        return handleMethod(settings);\n    },\n\n    /**\n     * Determines maximum width of an HTML canvas element. When `max` is\n     * unspecified, an optimized test will be performed using known maximum\n     * values from a variety of browsers and platforms.\n     *\n     * @param {object} [options]\n     * @param {number} [options.max]\n     * @param {number} [options.min=1]\n     * @param {number} [options.step=1024]\n     * @param {boolean} [options.usePromise=false]\n     * @param {function} [options.onError]\n     * @param {function} [options.onSuccess]\n     */\n    maxWidth(options = {}) {\n        const sizes = createSizesArray({\n            width : options.max,\n            height: 1,\n            min   : options.min,\n            step  : options.step,\n            sizes : [...testSizes.width]\n        });\n        const settings = Object.assign({}, defaults, options, { sizes });\n\n        return handleMethod(settings);\n    },\n\n    /**\n     * Tests ability to read pixel data from canvas of specified dimension(s).\n     *\n     * @param {object} [options]\n     * @param {number} [options.width]\n     * @param {number} [options.height]\n     * @param {number[][]} [options.sizes]\n     * @param {boolean} [options.usePromise=false]\n     * @param {function} [options.onError]\n     * @param {function} [options.onSuccess]\n     */\n    test(options = {}) {\n        const settings = Object.assign({}, defaults, options);\n\n        // Prevent mutation of sizes array if referencing user array\n        settings.sizes = [...settings.sizes];\n\n        if (settings.width && settings.height) {\n            settings.sizes = [[settings.width, settings.height]];\n        }\n\n        return handleMethod(settings);\n    }\n};\n\n\n// Exports\n// =============================================================================\nexport default canvasSize;"],"names":["canvasTest","settings","size","sizes","shift","width","height","fill","job","Date","now","isWorker","WorkerGlobalScope","self","cropCvs","testCvs","OffscreenCanvas","document","createElement","cropCtx","getContext","testCtx","fillRect","apply","drawImage","isTestPass","getImageData","data","benchmark","postMessage","length","onSuccess","onError","defaults","max","min","step","usePromise","useWorker","Function","prototype","testSizes","area","workerJobs","createSizesArray","isArea","isWidth","isHeight","forEach","testSize","push","testMin","testStep","Math","handleMethod","hasCanvasSupport","window","HTMLCanvasElement","jobID","js","toString","blob","Blob","type","blobURL","URL","createObjectURL","worker","Worker","workerSettings","revokeObjectURL","onmessage","e","Promise","resolve","reject","newSettings","_extends","canvasSize","maxArea","options","maxHeight","maxWidth","test"],"mappings":"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"}