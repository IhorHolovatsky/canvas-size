{"version":3,"file":"canvas-size.js","sources":["../src/worker.js","../src/create-worker.js","../src/index.js"],"sourcesContent":["/* istanbul ignore next */\nexport default function canvasWorker() {\n    function canvasTest(settings) {\n        const { job, width, height, fill } = settings;\n        const cvs = new OffscreenCanvas(width, height);\n        const ctx = cvs.getContext('2d');\n\n        ctx.fillRect.apply(ctx, fill);\n\n        // Verify image data (Pass = 255, Fail = 0)\n        const isTestPass = Boolean(ctx.getImageData.apply(ctx, fill).data[3]);\n\n        self.postMessage({\n            job,\n            width,\n            height,\n            isTestPass\n        });\n    }\n\n    self.onmessage = function(e) {\n        canvasTest(e.data);\n    };\n}\n","function createWorker(fn) {\n    const js      = `(${fn.toString()})()`;\n    const blob    = new Blob([js], { type: 'application/javascript' });\n    const blobURL = URL.createObjectURL(blob);\n    const worker  = new Worker(blobURL);\n\n    URL.revokeObjectURL(blobURL);\n\n    return worker;\n}\n\nexport default createWorker;\n","import canvasWorker from './worker.js';\nimport createWorker from './create-worker.js';\n\n\n// Constants & Variables\n// =============================================================================\nconst defaults = {\n    max  : null,\n    min  : 1,\n    sizes: [],\n    step : 1024,\n    // Callbacks\n    onError  : Function.prototype,\n    onSuccess: Function.prototype\n};\nconst testSizes = {\n    area: [\n        // Chrome 70 (Mac, Win)\n        // Chrome 68 (Android 4.4)\n        // Edge 17 (Win)\n        // Safari 7-12 (Mac)\n        16384,\n        // Chrome 68 (Android 7.1-9)\n        14188,\n        // Chrome 68 (Android 5),\n        11402,\n        // Chrome 68 (Android 6)\n        10836,\n        // Firefox 63 (Mac, Win)\n        11180,\n        // IE 9-11 (Win)\n        8192,\n        // IE Mobile (Windows Phone 8.x)\n        // Safari (iOS 9 - 12)\n        4096,\n        // Failed\n        defaults.min\n    ],\n    height: [\n        // Safari 7-12 (Mac)\n        // Safari (iOS 9-12)\n        8388607,\n        // Chrome ??\n        65535,\n        // Chrome 70 (Mac, Win)\n        // Chrome 68 (Android 4.4-9)\n        // Firefox 63 (Mac, Win)\n        32767,\n        // IE11\n        // Edge 17 (Win)\n        16384,\n        // IE 9-10 (Win)\n        8192,\n        // IE Mobile (Windows Phone 8.x)\n        4096,\n        // Failed\n        defaults.min\n    ],\n    width: [\n        // Safari 7-12 (Mac)\n        // Safari (iOS 9-12)\n        4194303,\n        // Chrome ??\n        65535,\n        // Chrome 70 (Mac, Win)\n        // Chrome 68 (Android 4.4-9)\n        // Firefox 63 (Mac, Win)\n        32767,\n        // IE11\n        // Edge 17 (Win)\n        16384,\n        // IE 9-10 (Win)\n        8192,\n        // IE Mobile (Windows Phone 8.x)\n        4096,\n        // Failed\n        defaults.min\n    ]\n};\n\n// Web worker reference\nlet worker;\n\n// Generate inline web worker\nif (window && ('OffscreenCanvas' in window) && ('Worker' in window)) {\n    worker = createWorker(canvasWorker);\n    worker.onmessage = function(e) {\n        const { job, width, height, isTestPass } = e.data;\n\n        document.dispatchEvent(\n            // Dispatch custom event\n            new CustomEvent(job, {\n                detail: {\n                    width,\n                    height,\n                    isTestPass,\n                    benchmark: (Date.now() - job) // milliseconds\n                }\n            })\n        );\n    };\n}\n\n\n// Functions (Private)\n// =============================================================================\n/**\n * Tests ability to read pixel data from a canvas at a specified dimension.\n *\n * @param {object} settings\n * @param {number} settings.width\n * @param {number} settings.height\n * @param {function} settings.onError\n * @param {function} settings.onSuccess\n */\nfunction canvasTest(settings) {\n    const { width, height } = settings;\n    const fill = [width - 1, height - 1, 1, 1]; // x, y, width, height\n    const job  = Date.now();\n\n    // Web worker\n    if (worker) {\n        // Listen for custom job event\n        document.addEventListener(job, function(e) {\n            const { width, height, isTestPass, benchmark } = e.detail;\n\n            if (isTestPass) {\n                settings.onSuccess(width, height, benchmark);\n            }\n            else {\n                settings.onError(width, height);\n            }\n        }, false);\n\n        // Send canvas reference and test data to web worker\n        worker.postMessage({\n            job,\n            width,\n            height,\n            fill\n        });\n    }\n    else {\n        try {\n            const cvs = document.createElement('canvas');\n            const ctx = cvs.getContext('2d');\n\n            cvs.width = width;\n            cvs.height = height;\n            ctx.fillRect.apply(ctx, fill);\n\n            // Verify image data (Pass = 255, Fail = 0)\n            const isTestPass = Boolean(ctx.getImageData.apply(ctx, fill).data[3]);\n\n            if (isTestPass) {\n                const benchmark = Date.now() - job; // milliseconds\n\n                settings.onSuccess(width, height, benchmark);\n            }\n            else {\n                settings.onError(width, height);\n            }\n        }\n        catch(e){\n            settings.onError(width, height);\n        }\n    }\n}\n\n/**\n * Tests ability to read pixel data from canvas elements of various dimensions\n * by decreasing canvas height and/or width until a test succeeds.\n *\n * @param {object} settings\n * @param {number[][]} settings.sizes\n * @param {function} settings.onError\n * @param {function} settings.onSuccess\n */\nfunction canvasTestLoop(settings) {\n    const sizes  = settings.sizes.shift();\n    const width  = sizes[0];\n    const height = sizes[1];\n\n    canvasTest({\n        width,\n        height,\n        onError(width, height) {\n            settings.onError(width, height);\n\n            if (settings.sizes.length) {\n                canvasTestLoop(settings);\n            }\n        },\n        onSuccess: settings.onSuccess\n    });\n}\n\n/**\n * Creates a 2d array of canvas dimensions either from the default testSizes\n * object or the width/height/min/step values provided.\n *\n * @param   {object} settings\n * @param   {number} settings.width\n * @param   {number} settings.height\n * @param   {number} settings.min\n * @param   {number} settings.step\n * @param   {number[][]} settings.sizes\n * @returns {number[][]}\n */\nfunction createSizesArray(settings) {\n    const isArea   = settings.width === settings.height;\n    const isWidth  = settings.height === 1;\n    const isHeight = settings.width === 1;\n    const sizes    = [];\n\n    // Use settings.sizes\n    if (!settings.width || !settings.height) {\n        settings.sizes.forEach(testSize => {\n            const width  = isArea || isWidth ? testSize : 1;\n            const height = isArea || isHeight ? testSize : 1;\n\n            sizes.push([width, height]);\n        });\n    }\n    // Generate sizes from width, height, and step\n    else {\n        const testMin  = settings.min || defaults.min;\n        const testStep = settings.step || defaults.step;\n        let   testSize = Math.max(settings.width, settings.height);\n\n        while (testSize > testMin) {\n            const width  = isArea || isWidth ? testSize : 1;\n            const height = isArea || isHeight ? testSize : 1;\n\n            sizes.push([width, height]);\n            testSize -= testStep;\n        }\n\n        sizes.push([testMin, testMin]);\n    }\n\n    return sizes;\n}\n\n\n// Methods\n// =============================================================================\nconst canvasSize = {\n    /**\n     * Determines maximum area of an HTML canvas element. When `max` is\n     * unspecified, an optimized test will be performed using known maximum\n     * values from a variety of browsers and platforms.\n     *\n     * @param {object} [options]\n     * @param {number} [options.max]\n     * @param {number} [options.min=1]\n     * @param {number} [options.step=1024]\n     * @param {function} [options.onError]\n     * @param {function} [options.onSuccess]\n     */\n    maxArea(options = {}) {\n        const sizes = createSizesArray({\n            width : options.max,\n            height: options.max,\n            min   : options.min,\n            step  : options.step,\n            sizes : [...testSizes.area]\n        });\n        const settings = Object.assign({}, defaults, options, { sizes });\n\n        canvasTestLoop(settings);\n    },\n\n    /**\n     * Determines maximum height of an HTML canvas element. When `max` is\n     * unspecified, an optimized test will be performed using known maximum\n     * values from a variety of browsers and platforms.\n     *\n     * @param {object} [options]\n     * @param {number} [options.max]\n     * @param {number} [options.min=1]\n     * @param {number} [options.step=1024]\n     * @param {function} [options.onError]\n     * @param {function} [options.onSuccess]\n     */\n    maxHeight(options = {}) {\n        const sizes = createSizesArray({\n            width : 1,\n            height: options.max,\n            min   : options.min,\n            step  : options.step,\n            sizes : [...testSizes.height]\n        });\n        const settings = Object.assign({}, defaults, options, { sizes });\n\n        canvasTestLoop(settings);\n    },\n\n    /**\n     * Determines maximum width of an HTML canvas element. When `max` is\n     * unspecified, an optimized test will be performed using known maximum\n     * values from a variety of browsers and platforms.\n     *\n     * @param {object} [options]\n     * @param {number} [options.max]\n     * @param {number} [options.min=1]\n     * @param {number} [options.step=1024]\n     * @param {function} [options.onError]\n     * @param {function} [options.onSuccess]\n     */\n    maxWidth(options = {}) {\n        const sizes = createSizesArray({\n            width : options.max,\n            height: 1,\n            min   : options.min,\n            step  : options.step,\n            sizes : [...testSizes.width]\n        });\n        const settings = Object.assign({}, defaults, options, { sizes });\n\n        canvasTestLoop(settings);\n    },\n\n    /**\n     * Tests ability to read pixel data from canvas of specified dimension(s).\n     *\n     * @param {object} [options]\n     * @param {number} [options.width]\n     * @param {number} [options.height]\n     * @param {number[][]} [options.sizes]\n     * @param {function} [options.onError]\n     * @param {function} [options.onSuccess]\n     */\n    test(options = {}) {\n        const settings = Object.assign({}, defaults, options);\n\n        if (settings.sizes.length) {\n            settings.sizes = [...options.sizes];\n            canvasTestLoop(settings);\n        }\n        else {\n            canvasTest(settings);\n        }\n    }\n};\n\n\n// Exports\n// =============================================================================\nexport default canvasSize;"],"names":["canvasWorker","canvasTest","settings","job","width","height","fill","cvs","OffscreenCanvas","ctx","getContext","fillRect","apply","isTestPass","Boolean","getImageData","data","self","postMessage","onmessage","e","createWorker","fn","js","toString","blob","Blob","type","blobURL","URL","createObjectURL","worker","Worker","revokeObjectURL","defaults","max","min","sizes","step","onError","Function","prototype","onSuccess","testSizes","area","window","document","dispatchEvent","CustomEvent","detail","benchmark","Date","now","addEventListener","createElement","canvasTestLoop","shift","length","createSizesArray","isArea","isWidth","isHeight","forEach","testSize","push","testMin","testStep","Math","canvasSize","maxArea","options","_extends","maxHeight","maxWidth","test"],"mappings":"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"}