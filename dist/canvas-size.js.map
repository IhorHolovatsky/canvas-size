{"version":3,"file":"canvas-size.js","sources":["../src/index.js"],"sourcesContent":["// Constants & Variables\n// =============================================================================\nconst cvs      = document ? document.createElement('canvas') : null;\nconst ctx      = cvs && cvs.getContext ? cvs.getContext('2d') : null;\nconst defaults = {\n    step: 1024,\n    // Callbacks\n    onError  : Function.prototype,\n    onSuccess: Function.prototype\n};\n\n\n// Functions (Private)\n// =============================================================================\n/**\n * Tests ability to read pixel data from canvases of various dimensions by\n * decreasing canvas height and/or width until a success test occurs.\n *\n * @param {object} options\n * @param {number} options.minHeight\n * @param {number} options.maxHeight\n * @param {number} options.minWidth\n * @param {number} options.maxWidth\n * @param {number} options.step\n * @param {function} options.onError\n * @param {function} options.onSuccess\n * @param {function} [_settings]\n */\nfunction canvasLoop(options = {}, _settings) {\n    const settings = _settings || Object.assign({}, defaults, options);\n    const testPass = canvasTest(settings.maxHeight, settings.maxWidth);\n\n    if (testPass) {\n        settings.onSuccess(settings.maxHeight, settings.maxWidth);\n    }\n    else {\n        const isLargerThanMin = settings.maxHeight > settings.minHeight || settings.maxWidth > settings.minWidth;\n\n        settings.onError(settings.maxHeight, settings.maxWidth);\n\n        // Decrease value(s) by step amount and test again\n        if (isLargerThanMin) {\n            settings.maxWidth  = Math.max(settings.maxWidth - settings.step, settings.minWidth);\n            settings.maxHeight = Math.max(settings.maxHeight - settings.step, settings.minHeight);\n\n            // Test again with decreased values\n            setTimeout(function(){\n                canvasLoop(null, settings);\n            }, 0);\n        }\n    }\n}\n\n/**\n * Tests ability to read pixel data from canvas of specified dimensions.\n *\n * @param {number} height\n * @param {number} width\n * @returns {boolean}\n */\nfunction canvasTest(height, width) {\n    // Define test rectangle dimensions and coordinates\n    const w = 1;\n    const h = 1;\n    const x = width - w;  // Right edge\n    const y = height - h; // Bottom edge\n\n    try {\n        // Set sized canvas dimensions and draw test rectangle\n        cvs.width = width;\n        cvs.height = height;\n        ctx.fillRect(x, y, w, h);\n\n        // Verify test rectangle image data (Pass = 255, Fail = 0)\n        return Boolean(ctx.getImageData(x, y, w, h).data[3]);\n    }\n    catch(e){\n        return false;\n    }\n}\n\n\n// Export\n// =============================================================================\nconst canvasSize = {\n    /**\n     * Determines maximum canvas area. Tests begins with the `max` value which\n     * is then reduced by the `step` value until a successful test pass or the\n     * `min` value is reached.\n     *\n     * @param {object} [options]\n     * @param {number} [options.min=1]\n     * @param {number} [options.max=16384]\n     * @param {number} [options.step=1024]\n     * @param {function} [options.onError]\n     * @param {function} [options.onSuccess]\n     */\n    maxArea(options = {}) {\n        const settings = Object.assign({}, defaults, options, {\n            minHeight: options.min || 1,\n            maxHeight: options.max || 16384,\n            minWidth : options.min || 1,\n            maxWidth : options.max || 16384\n        });\n\n        canvasLoop(settings);\n    },\n\n    /**\n     * Determines maximum canvas height. Tests begins with the `max` value which\n     * is then reduced by the `step` value until a successful test pass or the\n     * `min` value is reached.\n     *\n     * @param {object} [options]\n     * @param {number} [options.min=1]\n     * @param {number} [options.max=32767]\n     * @param {number} [options.step=1024]\n     * @param {function} [options.onError]\n     * @param {function} [options.onSuccess]\n     */\n    maxHeight(options = {}) {\n        const settings = Object.assign({}, defaults, options, {\n            minHeight: options.min || 1,\n            maxHeight: options.max || 32767,\n            minWidth : 1,\n            maxWidth : 1\n        });\n\n        canvasLoop(settings);\n    },\n\n    /**\n     * Determines maximum canvas width. Tests begins with the `max` value which\n     * is then reduced by the `step` value until a successful test pass or the\n     * `min` value is reached.\n     *\n     * @param {object} [options]\n     * @param {number} [options.min=1]\n     * @param {number} [options.max=32767]\n     * @param {number} [options.step=1024]\n     * @param {function} [options.onError]\n     * @param {function} [options.onSuccess]\n     */\n    maxWidth(options = {}) {\n        const settings = Object.assign({}, defaults, options, {\n            minHeight: 1,\n            maxHeight: 1,\n            minWidth : options.min || 1,\n            maxWidth : options.max || 32767\n        });\n\n        canvasLoop(settings);\n    },\n\n    /**\n     * Tests ability to read pixel data from canvas of specified dimensions.\n     *\n     * @param {object} [options]\n     * @param {number} [options.height=1]\n     * @param {number} [options.width=1]\n     * @param {function} [options.onError]\n     * @param {function} [options.onSuccess]\n     */\n    test(options = {}) {\n        const settings = Object.assign({}, defaults, options, {\n            height: options.height || 1,\n            width : options.width || 1\n        });\n        const testPass = canvasTest(settings.height, settings.width);\n\n        if (testPass) {\n            settings.onSuccess(settings.height, settings.width);\n        }\n        else {\n            settings.onError(settings.height, settings.width);\n        }\n    }\n};\n\nexport default canvasSize;"],"names":["cvs","document","createElement","ctx","getContext","defaults","step","onError","Function","prototype","onSuccess","canvasLoop","options","_settings","settings","_extends","testPass","canvasTest","maxHeight","maxWidth","isLargerThanMin","minHeight","minWidth","Math","max","setTimeout","height","width","w","h","x","y","fillRect","Boolean","getImageData","data","e","canvasSize","maxArea","min","test"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;IAEA,IAAMA,MAAWC,WAAWA,SAASC,cAAc,YAAY;IAC/D,IAAMC,MAAWH,OAAOA,IAAII,aAAaJ,IAAII,WAAW,QAAQ;IAChE,IAAMC,WAAW;QACbC,MAAM;QAENC,SAAWC,SAASC;QACpBC,WAAWF,SAASC;;IAoBxB,SAASE;YAAWC,8EAAU;YAAIC;YACxBC,WAAWD,aAAaE,SAAc,IAAIV,UAAUO;YACpDI,WAAWC,WAAWH,SAASI,WAAWJ,SAASK;YAErDH,UAAU;YACVF,SAASJ,UAAUI,SAASI,WAAWJ,SAASK;eAE/C;gBACKC,kBAAkBN,SAASI,YAAYJ,SAASO,aAAaP,SAASK,WAAWL,SAASQ;YAEhGR,SAASP,QAAQO,SAASI,WAAWJ,SAASK;gBAG1CC,iBAAiB;gBACjBN,SAASK,WAAYI,KAAKC,IAAIV,SAASK,WAAWL,SAASR,MAAMQ,SAASQ;gBAC1ER,SAASI,YAAYK,KAAKC,IAAIV,SAASI,YAAYJ,SAASR,MAAMQ,SAASO;gBAG3EI,WAAW;oBACPd,WAAW,MAAMG;mBAClB;;;;IAYf,SAASG,WAAWS,QAAQC;YAElBC,IAAI;YACJC,IAAI;YACJC,IAAIH,QAAQC;YACZG,IAAIL,SAASG;;YAIf7B,IAAI2B,QAAQA;YACZ3B,IAAI0B,SAASA;YACbvB,IAAI6B,SAASF,GAAGC,GAAGH,GAAGC;mBAGfI,QAAQ9B,IAAI+B,aAAaJ,GAAGC,GAAGH,GAAGC,GAAGM,KAAK;UAErD,OAAMC;mBACK;;;IAOf,IAAMC,aAAa;QAafC;gBAAQ1B,8EAAU;gBACRE,WAAWC,SAAc,IAAIV,UAAUO,SAAS;gBAClDS,WAAWT,QAAQ2B,OAAO;gBAC1BrB,WAAWN,QAAQY,OAAO;gBAC1BF,UAAWV,QAAQ2B,OAAO;gBAC1BpB,UAAWP,QAAQY,OAAO;;YAG9Bb,WAAWG;;QAefI;gBAAUN,8EAAU;gBACVE,WAAWC,SAAc,IAAIV,UAAUO,SAAS;gBAClDS,WAAWT,QAAQ2B,OAAO;gBAC1BrB,WAAWN,QAAQY,OAAO;gBAC1BF,UAAW;gBACXH,UAAW;;YAGfR,WAAWG;;QAefK;gBAASP,8EAAU;gBACTE,WAAWC,SAAc,IAAIV,UAAUO,SAAS;gBAClDS,WAAW;gBACXH,WAAW;gBACXI,UAAWV,QAAQ2B,OAAO;gBAC1BpB,UAAWP,QAAQY,OAAO;;YAG9Bb,WAAWG;;QAYf0B;gBAAK5B,8EAAU;gBACLE,WAAWC,SAAc,IAAIV,UAAUO,SAAS;gBAClDc,QAAQd,QAAQc,UAAU;gBAC1BC,OAAQf,QAAQe,SAAS;;gBAEvBX,WAAWC,WAAWH,SAASY,QAAQZ,SAASa;gBAElDX,UAAU;gBACVF,SAASJ,UAAUI,SAASY,QAAQZ,SAASa;mBAE5C;gBACDb,SAASP,QAAQO,SAASY,QAAQZ,SAASa;;;;"}