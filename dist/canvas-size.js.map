{"version":3,"file":"canvas-size.js","sources":["../src/canvas-test.js","../src/index.js"],"sourcesContent":["const hasCanvasSupport = window && window.HTMLCanvasElement;\n\nlet cropCvs, cropCtx, testCvs, testCtx;\n\n/* istanbul ignore else */\nif (hasCanvasSupport) {\n    cropCvs = document.createElement('canvas');\n    cropCtx = cropCvs.getContext('2d');\n    testCvs = document.createElement('canvas');\n    testCtx = testCvs.getContext('2d');\n}\n\n/**\n * Tests ability to read pixel data from canvas elements of various dimensions\n * by decreasing canvas height and/or width until a test succeeds.\n *\n * @param {object} settings\n * @param {number[][]} settings.sizes\n * @param {function} settings.onError\n * @param {function} settings.onSuccess\n */\nfunction canvasTest(settings) {\n    /* istanbul ignore if */\n    if (!hasCanvasSupport) {\n        return false;\n    }\n\n    const [width, height] = settings.sizes.shift();\n    const fill = [width - 1, height - 1, 1, 1]; // x, y, width, height\n    const job = Date.now();\n\n    // Size (which resets) test canvas and render test pixel\n    testCvs.width = width;\n    testCvs.height = height;\n    testCtx.fillRect.apply(testCtx, fill);\n\n    // Size (which resets) crop canvas\n    cropCvs.width = 1;\n    cropCvs.height = 1;\n    // Render the test pixel in the bottom=right corner of the\n    // test canvas in the top-left of the 1x1 crop canvas. This\n    // dramatically reducing the time for getImageData to complete.\n    cropCtx.drawImage(testCvs, 0 - (width - 1), 0 - (height - 1));\n\n    // Verify image data (Pass = 255, Fail = 0)\n    const isTestPass = Boolean(cropCtx.getImageData(0, 0, 1, 1).data[3]);\n    const benchmark = Date.now() - job; // milliseconds\n\n    if (isTestPass) {\n        settings.onSuccess(width, height, benchmark);\n    }\n    else {\n        settings.onError(width, height, benchmark);\n\n        if (settings.sizes.length) {\n            if (window.requestAnimationFrame) {\n                window.requestAnimationFrame(() => {\n                    canvasTest(settings);\n                });\n            }\n            else {\n                canvasTest(settings);\n            }\n        }\n    }\n\n    return isTestPass;\n}\n\n/**\n * Promise-based version of canvasTest()\n *\n * @param   {object} settings\n * @param   {number[][]} settings.sizes\n * @param   {function} settings.onError\n * @param   {function} settings.onSuccess\n * @returns {object} Promise\n */\nfunction canvasTestPromise(settings) {\n    return new Promise((resolve, reject) => {\n        // Modify callbacks resolve/reject Promise\n        const newSettings = Object.assign({}, settings, {\n            onError(width, height, benchmark) {\n                /* istanbul ignore else */\n                if (settings.onError) {\n                    settings.onError(width, height, benchmark);\n                }\n                if (settings.sizes.length === 0) {\n                    reject({ width, height, benchmark });\n                }\n            },\n            onSuccess(width, height, benchmark) {\n                /* istanbul ignore else */\n                if (settings.onSuccess) {\n                    settings.onSuccess(width, height, benchmark);\n                }\n\n                resolve({ width, height, benchmark });\n            }\n        });\n\n        canvasTest(newSettings);\n    });\n}\n\nexport { canvasTest, canvasTestPromise };\n","import { canvasTest, canvasTestPromise } from './canvas-test.js';\n\n// Constants & Variables\n// =============================================================================\nconst defaults = {\n    max       : null,\n    min       : 1,\n    sizes     : [],\n    step      : 1024,\n    usePromise: false,\n    // Callbacks\n    onError   : Function.prototype,\n    onSuccess : Function.prototype\n};\nconst testSizes = {\n    area: [\n        // Future Browsers?\n        32767,\n        // Chrome 70 (Mac, Win)\n        // Chrome 68 (Android 4.4)\n        // Edge 17 (Win)\n        // Safari 7-12 (Mac)\n        16384,\n        // Chrome 68 (Android 7.1-9)\n        14188,\n        // Chrome 68 (Android 5),\n        11402,\n        // Chrome 68 (Android 6)\n        10836,\n        // Firefox 63 (Mac, Win)\n        11180,\n        // IE 9-11 (Win)\n        8192,\n        // IE Mobile (Windows Phone 8.x)\n        // Safari (iOS 9 - 12)\n        4096,\n        // Failed\n        defaults.min\n    ],\n    height: [\n        // Safari 7-12 (Mac)\n        // Safari (iOS 9-12)\n        8388607,\n        // Chrome 83 (Mac, Win)\n        65535,\n        // Chrome 70 (Mac, Win)\n        // Chrome 68 (Android 4.4-9)\n        // Firefox 63 (Mac, Win)\n        32767,\n        // IE11\n        // Edge 17 (Win)\n        16384,\n        // IE 9-10 (Win)\n        8192,\n        // IE Mobile (Windows Phone 8.x)\n        4096,\n        // Failed\n        defaults.min\n    ],\n    width: [\n        // Safari 7-12 (Mac)\n        // Safari (iOS 9-12)\n        4194303,\n        // Chrome 83 (Mac, Win)\n        65535,\n        // Chrome 70 (Mac, Win)\n        // Chrome 68 (Android 4.4-9)\n        // Firefox 63 (Mac, Win)\n        32767,\n        // IE11\n        // Edge 17 (Win)\n        16384,\n        // IE 9-10 (Win)\n        8192,\n        // IE Mobile (Windows Phone 8.x)\n        4096,\n        // Failed\n        defaults.min\n    ]\n};\n\n\n// Functions (Private)\n// =============================================================================\n/**\n * Creates a 2d array of canvas dimensions either from the default testSizes\n * object or the width/height/min/step values provided.\n *\n * @param   {object} settings\n * @param   {number} settings.width\n * @param   {number} settings.height\n * @param   {number} settings.min\n * @param   {number} settings.step\n * @param   {number[][]} settings.sizes\n * @returns {number[][]}\n */\nfunction createSizesArray(settings) {\n    const isArea   = settings.width === settings.height;\n    const isWidth  = settings.height === 1;\n    const isHeight = settings.width === 1;\n    const sizes    = [];\n\n    // Use settings.sizes\n    if (!settings.width || !settings.height) {\n        settings.sizes.forEach(testSize => {\n            const width  = isArea || isWidth ? testSize : 1;\n            const height = isArea || isHeight ? testSize : 1;\n\n            sizes.push([width, height]);\n        });\n    }\n    // Generate sizes from width, height, and step\n    else {\n        const testMin  = settings.min || defaults.min;\n        const testStep = settings.step || defaults.step;\n        let   testSize = Math.max(settings.width, settings.height);\n\n        while (testSize >= testMin) {\n            const width  = isArea || isWidth ? testSize : 1;\n            const height = isArea || isHeight ? testSize : 1;\n\n            sizes.push([width, height]);\n            testSize -= testStep;\n        }\n    }\n\n    return sizes;\n}\n\n\n// Methods\n// =============================================================================\nconst canvasSize = {\n    /**\n     * Determines maximum area of an HTML canvas element. When `max` is\n     * unspecified, an optimized test will be performed using known maximum\n     * values from a variety of browsers and platforms.\n     *\n     * @param {object} [options]\n     * @param {number} [options.max]\n     * @param {number} [options.min=1]\n     * @param {number} [options.step=1024]\n     * @param {boolean} [options.usePromise=false]\n     * @param {function} [options.onError]\n     * @param {function} [options.onSuccess]\n     */\n    maxArea(options = {}) {\n        const sizes = createSizesArray({\n            width : options.max,\n            height: options.max,\n            min   : options.min,\n            step  : options.step,\n            sizes : [...testSizes.area]\n        });\n        const settings = Object.assign({}, defaults, options, { sizes });\n\n        if (settings.usePromise) {\n            return canvasTestPromise(settings);\n        }\n        else {\n            canvasTest(settings);\n        }\n    },\n\n    /**\n     * Determines maximum height of an HTML canvas element. When `max` is\n     * unspecified, an optimized test will be performed using known maximum\n     * values from a variety of browsers and platforms.\n     *\n     * @param {object} [options]\n     * @param {number} [options.max]\n     * @param {number} [options.min=1]\n     * @param {number} [options.step=1024]\n     * @param {boolean} [options.usePromise=false]\n     * @param {function} [options.onError]\n     * @param {function} [options.onSuccess]\n     */\n    maxHeight(options = {}) {\n        const sizes = createSizesArray({\n            width : 1,\n            height: options.max,\n            min   : options.min,\n            step  : options.step,\n            sizes : [...testSizes.height]\n        });\n        const settings = Object.assign({}, defaults, options, { sizes });\n\n        if (settings.usePromise) {\n            return canvasTestPromise(settings);\n        }\n        else {\n            canvasTest(settings);\n        }\n    },\n\n    /**\n     * Determines maximum width of an HTML canvas element. When `max` is\n     * unspecified, an optimized test will be performed using known maximum\n     * values from a variety of browsers and platforms.\n     *\n     * @param {object} [options]\n     * @param {number} [options.max]\n     * @param {number} [options.min=1]\n     * @param {number} [options.step=1024]\n     * @param {boolean} [options.usePromise=false]\n     * @param {function} [options.onError]\n     * @param {function} [options.onSuccess]\n     */\n    maxWidth(options = {}) {\n        const sizes = createSizesArray({\n            width : options.max,\n            height: 1,\n            min   : options.min,\n            step  : options.step,\n            sizes : [...testSizes.width]\n        });\n        const settings = Object.assign({}, defaults, options, { sizes });\n\n        if (settings.usePromise) {\n            return canvasTestPromise(settings);\n        }\n        else {\n            canvasTest(settings);\n        }\n    },\n\n    /**\n     * Tests ability to read pixel data from canvas of specified dimension(s).\n     *\n     * @param {object} [options]\n     * @param {number} [options.width]\n     * @param {number} [options.height]\n     * @param {number[][]} [options.sizes]\n     * @param {boolean} [options.usePromise=false]\n     * @param {function} [options.onError]\n     * @param {function} [options.onSuccess]\n     */\n    test(options = {}) {\n        const settings = Object.assign({}, defaults, options);\n\n        // Prevent mutation of sizes array if referencing user array\n        settings.sizes = [...settings.sizes];\n\n        if (settings.width && settings.height) {\n            settings.sizes = [[settings.width, settings.height]];\n        }\n\n        if (settings.usePromise) {\n            return canvasTestPromise(settings);\n        }\n        else {\n            return canvasTest(settings);\n        }\n    }\n};\n\n\n// Exports\n// =============================================================================\nexport default canvasSize;"],"names":["hasCanvasSupport","window","HTMLCanvasElement","cropCvs","cropCtx","testCvs","testCtx","document","createElement","getContext","canvasTest","settings","sizes","shift","width","height","fill","job","Date","now","fillRect","apply","drawImage","isTestPass","Boolean","getImageData","data","benchmark","onSuccess","onError","length","requestAnimationFrame","canvasTestPromise","Promise","resolve","reject","newSettings","_extends","defaults","max","min","step","usePromise","Function","prototype","testSizes","area","createSizesArray","isArea","isWidth","isHeight","forEach","testSize","push","testMin","testStep","Math","canvasSize","maxArea","options","maxHeight","maxWidth","test"],"mappings":"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"}