{"version":3,"file":"canvas-size.min.js","sources":["../src/index.js"],"sourcesContent":["// Constants & Variables\n// =============================================================================\nconst cvs      = document ? document.createElement('canvas') : null;\nconst ctx      = cvs && cvs.getContext ? cvs.getContext('2d') : null;\nconst defaults = {\n    max  : null,\n    min  : 1,\n    sizes: [],\n    step : 1024,\n    // Callbacks\n    onError  : Function.prototype,\n    onSuccess: Function.prototype\n};\nconst testSizes = {\n    area: [\n        // Chrome 70 (Mac, Win)\n        // Chrome 68 (Android 4.4)\n        // Edge 17 (Win)\n        // Safari 7-12 (Mac)\n        16384,\n        // Chrome 68 (Android 7.1-9)\n        14188,\n        // Chrome 68 (Android 5),\n        11402,\n        // Chrome 68 (Android 6)\n        10836,\n        // Firefox 63 (Mac, Win)\n        11180,\n        // IE 9-11 (Win)\n        8192,\n        // IE Mobile (Windows Phone 8.x)\n        // Safari (iOS 9 - 12)\n        4096,\n        // Failed\n        defaults.min\n    ],\n    height: [\n        // Safari 7-12 (Mac)\n        // Safari (iOS 9-12)\n        8388607,\n        // Chrome 70 (Mac, Win)\n        // Chrome 68 (Android 4.4-9)\n        // Firefox 63 (Mac, Win)\n        32767,\n        // IE11\n        // Edge 17 (Win)\n        16384,\n        // IE 9-10 (Win)\n        8192,\n        // IE Mobile (Windows Phone 8.x)\n        4096,\n        // Failed\n        defaults.min\n    ],\n    width: [\n        // Safari 7-12 (Mac)\n        // Safari (iOS 9-12)\n        4194303,\n        // Chrome 70 (Mac, Win)\n        // Chrome 68 (Android 4.4-9)\n        // Firefox 63 (Mac, Win)\n        32767,\n        // IE11\n        // Edge 17 (Win)\n        16384,\n        // IE 9-10 (Win)\n        8192,\n        // IE Mobile (Windows Phone 8.x)\n        4096,\n        // Failed\n        defaults.min\n    ]\n};\n\n\n// Functions (Private)\n// =============================================================================\n/**\n * Tests ability to read pixel data from a canvas at a specified dimension.\n *\n * @param {number} width\n * @param {number} height\n * @returns {boolean}\n */\nfunction canvasTest(width, height) {\n    // Define test rectangle dimensions and coordinates\n    const w = 1;\n    const h = 1;\n    const x = width - w;  // Right edge\n    const y = height - h; // Bottom edge\n\n    try {\n        // Set sized canvas dimensions and draw test rectangle\n        cvs.width = width;\n        cvs.height = height;\n        ctx.fillRect(x, y, w, h);\n\n        // Verify test rectangle image data (Pass = 255, Fail = 0)\n        return Boolean(ctx.getImageData(x, y, w, h).data[3]);\n    }\n    catch(e){\n        return false;\n    }\n}\n\n/**\n * Tests ability to read pixel data from canvas elements of various dimensions\n * by decreasing canvas height and/or width until a test succeeds.\n *\n * @param {object} settings\n * @param {number[][]} settings.sizes\n * @param {function} settings.onError\n * @param {function} settings.onSuccess\n */\nfunction canvasTestLoop(settings) {\n    const sizes    = settings.sizes.shift();\n    const width    = sizes[0];\n    const height   = sizes[1];\n    const testPass = canvasTest(width, height);\n\n    if (testPass) {\n        settings.onSuccess(width, height);\n    }\n    else {\n        settings.onError(width, height);\n\n        if (settings.sizes.length) {\n            setTimeout(function(){\n                canvasTestLoop(settings);\n            }, 0);\n        }\n    }\n}\n\n/**\n * Creates a 2d array of canvas dimensions either from the default testSizes\n * object or the width/height/min/step values provided.\n *\n * @param   {object} settings\n * @param   {number} settings.width\n * @param   {number} settings.height\n * @param   {number} settings.min\n * @param   {number} settings.step\n * @param   {number[][]} settings.sizes\n * @returns {number[][]}\n */\nfunction createSizesArray(settings) {\n    const isArea   = settings.width === settings.height;\n    const isWidth  = settings.height === 1;\n    const isHeight = settings.width === 1;\n    const sizes    = [];\n\n    // Use settings.sizes\n    if (!settings.width || !settings.height) {\n        settings.sizes.forEach(testSize => {\n            const width  = isArea || isWidth ? testSize : 1;\n            const height = isArea || isHeight ? testSize : 1;\n\n            sizes.push([width, height]);\n        });\n    }\n    // Generate sizes from width, height, and step\n    else {\n        const testMin  = settings.min || defaults.min;\n        const testStep = settings.step || defaults.step;\n        let   testSize = Math.max(settings.width, settings.height);\n\n        while (testSize > testMin) {\n            const width  = isArea || isWidth ? testSize : 1;\n            const height = isArea || isHeight ? testSize : 1;\n\n            sizes.push([width, height]);\n            testSize -= testStep;\n        }\n\n        sizes.push([testMin, testMin]);\n    }\n\n    return sizes;\n}\n\n\n// Methods\n// =============================================================================\nconst canvasSize = {\n    /**\n     * Determines maximum area of an HTML canvas element. When `max` is\n     * unspecified, an optimized test will be performed using known maximum\n     * values from a variety of browsers and platforms.\n     *\n     * @param {object} [options]\n     * @param {number} [options.max]\n     * @param {number} [options.min=1]\n     * @param {number} [options.step=1024]\n     * @param {function} [options.onError]\n     * @param {function} [options.onSuccess]\n     */\n    maxArea(options = {}) {\n        const sizes = createSizesArray({\n            width : options.max,\n            height: options.max,\n            min   : options.min,\n            step  : options.step,\n            sizes : [...testSizes.area]\n        });\n        const settings = Object.assign({}, defaults, options, { sizes });\n\n        canvasTestLoop(settings);\n    },\n\n    /**\n     * Determines maximum height of an HTML canvas element. When `max` is\n     * unspecified, an optimized test will be performed using known maximum\n     * values from a variety of browsers and platforms.\n     *\n     * @param {object} [options]\n     * @param {number} [options.max]\n     * @param {number} [options.min=1]\n     * @param {number} [options.step=1024]\n     * @param {function} [options.onError]\n     * @param {function} [options.onSuccess]\n     */\n    maxHeight(options = {}) {\n        const sizes = createSizesArray({\n            width : 1,\n            height: options.max,\n            min   : options.min,\n            step  : options.step,\n            sizes : [...testSizes.height]\n        });\n        const settings = Object.assign({}, defaults, options, { sizes });\n\n        canvasTestLoop(settings);\n    },\n\n    /**\n     * Determines maximum width of an HTML canvas element. When `max` is\n     * unspecified, an optimized test will be performed using known maximum\n     * values from a variety of browsers and platforms.\n     *\n     * @param {object} [options]\n     * @param {number} [options.max]\n     * @param {number} [options.min=1]\n     * @param {number} [options.step=1024]\n     * @param {function} [options.onError]\n     * @param {function} [options.onSuccess]\n     */\n    maxWidth(options = {}) {\n        const sizes = createSizesArray({\n            width : options.max,\n            height: 1,\n            min   : options.min,\n            step  : options.step,\n            sizes : [...testSizes.width]\n        });\n        const settings = Object.assign({}, defaults, options, { sizes });\n\n        canvasTestLoop(settings);\n    },\n\n    /**\n     * Tests ability to read pixel data from canvas of specified dimension(s).\n     *\n     * @param {object} [options]\n     * @param {number} [options.width]\n     * @param {number} [options.height]\n     * @param {number[][]} [options.sizes]\n     * @param {function} [options.onError]\n     * @param {function} [options.onSuccess]\n     * @returns {boolean} Returns boolean when width/heigt is set (not sizes)\n     */\n    test(options = {}) {\n        const settings = Object.assign({}, defaults, options);\n\n        if (settings.sizes.length) {\n            settings.sizes = [...options.sizes];\n            canvasTestLoop(settings);\n        }\n        else {\n            const testPass = canvasTest(settings.width, settings.height);\n\n            return testPass;\n        }\n    }\n};\n\n\n// Exports\n// =============================================================================\nexport default canvasSize;"],"names":["cvs","document","createElement","ctx","getContext","defaults","max","min","sizes","step","onError","Function","prototype","onSuccess","testSizes","area","height","width","canvasTest","x","y","fillRect","Boolean","getImageData","data","e","canvasTestLoop","settings","shift","length","setTimeout","createSizesArray","isArea","isWidth","isHeight","testMin","testStep","testSize","Math","push","forEach","maxArea","options","_extends","maxHeight","maxWidth","test"],"mappings":";;;;;;;0tBAEA,IAAMA,EAAWC,SAAWA,SAASC,cAAc,UAAY,KACzDC,EAAWH,GAAOA,EAAII,WAAaJ,EAAII,WAAW,MAAQ,KAC1DC,EAAW,CACbC,IAAO,KACPC,IAAO,EACPC,MAAO,GACPC,KAAO,KAEPC,QAAWC,SAASC,UACpBC,UAAWF,SAASC,WAElBE,EAAY,CACdC,KAAM,yCAoBFV,EAASE,KAEbS,OAAQ,+BAgBJX,EAASE,KAEbU,MAAO,+BAgBHZ,EAASE,MAcjB,SAASW,EAAWD,EAAOD,OAIjBG,EAAIF,EAFA,EAGJG,EAAIJ,EAFA,aAMNhB,EAAIiB,MAAQA,EACZjB,EAAIgB,OAASA,EACbb,EAAIkB,SAASF,EAAGC,EATV,EACA,GAWCE,QAAQnB,EAAIoB,aAAaJ,EAAGC,EAZ7B,EACA,GAWsCI,KAAK,IAErD,MAAMC,UACK,GAaf,SAASC,EAAeC,OACdnB,EAAWmB,EAASnB,MAAMoB,QAC1BX,EAAWT,EAAM,GACjBQ,EAAWR,EAAM,GACNU,EAAWD,EAAOD,GAG/BW,EAASd,UAAUI,EAAOD,IAG1BW,EAASjB,QAAQO,EAAOD,GAEpBW,EAASnB,MAAMqB,QACfC,WAAW,WACPJ,EAAeC,IAChB,IAiBf,SAASI,EAAiBJ,OAChBK,EAAWL,EAASV,QAAUU,EAASX,OACvCiB,EAA+B,IAApBN,EAASX,OACpBkB,EAA8B,IAAnBP,EAASV,MACpBT,EAAW,MAGZmB,EAASV,OAAUU,EAASX,OAS5B,SACKmB,EAAWR,EAASpB,KAAOF,EAASE,IACpC6B,EAAWT,EAASlB,MAAQJ,EAASI,KACrC4B,EAAWC,KAAKhC,IAAIqB,EAASV,MAAOU,EAASX,QAE5CqB,EAAWF,GAAS,KACjBlB,EAASe,GAAUC,EAAUI,EAAW,EACxCrB,EAASgB,GAAUE,EAAWG,EAAW,EAE/C7B,EAAM+B,KAAK,CAACtB,EAAOD,IACnBqB,GAAYD,EAGhB5B,EAAM+B,KAAK,CAACJ,EAASA,SArBrBR,EAASnB,MAAMgC,QAAQ,SAAAH,OACbpB,EAASe,GAAUC,EAAUI,EAAW,EACxCrB,EAASgB,GAAUE,EAAWG,EAAW,EAE/C7B,EAAM+B,KAAK,CAACtB,EAAOD,aAoBpBR,QAMQ,CAafiC,uBAAQC,yDAAU,GACRlC,EAAQuB,EAAiB,CAC3Bd,MAAQyB,EAAQpC,IAChBU,OAAQ0B,EAAQpC,IAChBC,IAAQmC,EAAQnC,IAChBE,KAAQiC,EAAQjC,KAChBD,QAAYM,EAAUC,QAI1BW,EAFiBiB,EAAc,GAAItC,EAAUqC,EAAS,CAAElC,MAAAA,MAiB5DoC,yBAAUF,yDAAU,GACVlC,EAAQuB,EAAiB,CAC3Bd,MAAQ,EACRD,OAAQ0B,EAAQpC,IAChBC,IAAQmC,EAAQnC,IAChBE,KAAQiC,EAAQjC,KAChBD,QAAYM,EAAUE,UAI1BU,EAFiBiB,EAAc,GAAItC,EAAUqC,EAAS,CAAElC,MAAAA,MAiB5DqC,wBAASH,yDAAU,GACTlC,EAAQuB,EAAiB,CAC3Bd,MAAQyB,EAAQpC,IAChBU,OAAQ,EACRT,IAAQmC,EAAQnC,IAChBE,KAAQiC,EAAQjC,KAChBD,QAAYM,EAAUG,SAI1BS,EAFiBiB,EAAc,GAAItC,EAAUqC,EAAS,CAAElC,MAAAA,MAgB5DsC,oBAAKJ,yDAAU,GACLf,EAAWgB,EAAc,GAAItC,EAAUqC,OAEzCf,EAASnB,MAAMqB,cAKEX,EAAWS,EAASV,MAAOU,EAASX,QAJrDW,EAASnB,QAAYkC,EAAQlC,OAC7BkB,EAAeC"}