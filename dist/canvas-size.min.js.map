{"version":3,"file":"canvas-size.min.js","sources":["../src/index.js","../src/create-worker.js","../src/worker.js"],"sourcesContent":["import canvasWorker from './worker.js';\nimport createWorker from './create-worker.js';\n\n\n// Constants & Variables\n// =============================================================================\nconst defaults = {\n    max  : null,\n    min  : 1,\n    sizes: [],\n    step : 1024,\n    // Callbacks\n    onError  : Function.prototype,\n    onSuccess: Function.prototype\n};\nconst testSizes = {\n    area: [\n        // Chrome 70 (Mac, Win)\n        // Chrome 68 (Android 4.4)\n        // Edge 17 (Win)\n        // Safari 7-12 (Mac)\n        16384,\n        // Chrome 68 (Android 7.1-9)\n        14188,\n        // Chrome 68 (Android 5),\n        11402,\n        // Chrome 68 (Android 6)\n        10836,\n        // Firefox 63 (Mac, Win)\n        11180,\n        // IE 9-11 (Win)\n        8192,\n        // IE Mobile (Windows Phone 8.x)\n        // Safari (iOS 9 - 12)\n        4096,\n        // Failed\n        defaults.min\n    ],\n    height: [\n        // Safari 7-12 (Mac)\n        // Safari (iOS 9-12)\n        8388607,\n        // Chrome ??\n        65535,\n        // Chrome 70 (Mac, Win)\n        // Chrome 68 (Android 4.4-9)\n        // Firefox 63 (Mac, Win)\n        32767,\n        // IE11\n        // Edge 17 (Win)\n        16384,\n        // IE 9-10 (Win)\n        8192,\n        // IE Mobile (Windows Phone 8.x)\n        4096,\n        // Failed\n        defaults.min\n    ],\n    width: [\n        // Safari 7-12 (Mac)\n        // Safari (iOS 9-12)\n        4194303,\n        // Chrome ??\n        65535,\n        // Chrome 70 (Mac, Win)\n        // Chrome 68 (Android 4.4-9)\n        // Firefox 63 (Mac, Win)\n        32767,\n        // IE11\n        // Edge 17 (Win)\n        16384,\n        // IE 9-10 (Win)\n        8192,\n        // IE Mobile (Windows Phone 8.x)\n        4096,\n        // Failed\n        defaults.min\n    ]\n};\n\n// Web worker reference\nlet worker;\n\n// Generate inline web worker\nif (window && ('OffscreenCanvas' in window) && ('Worker' in window)) {\n    worker = createWorker(canvasWorker);\n    worker.onmessage = function(e) {\n        const { job, width, height, isTestPass } = e.data;\n\n        document.dispatchEvent(\n            // Dispatch custom event\n            new CustomEvent(job, {\n                detail: {\n                    width,\n                    height,\n                    isTestPass,\n                    benchmark: (Date.now() - job) // milliseconds\n                }\n            })\n        );\n    };\n}\n\n\n// Functions (Private)\n// =============================================================================\n/**\n * Tests ability to read pixel data from a canvas at a specified dimension.\n *\n * @param {object} settings\n * @param {number} settings.width\n * @param {number} settings.height\n * @param {function} settings.onError\n * @param {function} settings.onSuccess\n */\nfunction canvasTest(settings) {\n    const { width, height } = settings;\n    const fill = [width - 1, height - 1, 1, 1]; // x, y, width, height\n    const job  = Date.now();\n\n    // Web worker\n    if (worker) {\n        // Listen for custom job event\n        document.addEventListener(job, function(e) {\n            const { width, height, isTestPass, benchmark } = e.detail;\n\n            if (isTestPass) {\n                settings.onSuccess(width, height, benchmark);\n            }\n            else {\n                settings.onError(width, height);\n            }\n        }, false);\n\n        // Send canvas reference and test data to web worker\n        worker.postMessage({\n            job,\n            width,\n            height,\n            fill\n        });\n    }\n    else {\n        try {\n            const cvs = document.createElement('canvas');\n            const ctx = cvs.getContext('2d');\n\n            cvs.width = width;\n            cvs.height = height;\n            ctx.fillRect.apply(ctx, fill);\n\n            // Verify image data (Pass = 255, Fail = 0)\n            const isTestPass = Boolean(ctx.getImageData.apply(ctx, fill).data[3]);\n\n            if (isTestPass) {\n                const benchmark = Date.now() - job; // milliseconds\n\n                settings.onSuccess(width, height, benchmark);\n            }\n            else {\n                settings.onError(width, height);\n            }\n        }\n        catch(e){\n            settings.onError(width, height);\n        }\n    }\n}\n\n/**\n * Tests ability to read pixel data from canvas elements of various dimensions\n * by decreasing canvas height and/or width until a test succeeds.\n *\n * @param {object} settings\n * @param {number[][]} settings.sizes\n * @param {function} settings.onError\n * @param {function} settings.onSuccess\n */\nfunction canvasTestLoop(settings) {\n    const sizes  = settings.sizes.shift();\n    const width  = sizes[0];\n    const height = sizes[1];\n\n    canvasTest({\n        width,\n        height,\n        onError(width, height) {\n            settings.onError(width, height);\n\n            if (settings.sizes.length) {\n                canvasTestLoop(settings);\n            }\n        },\n        onSuccess: settings.onSuccess\n    });\n}\n\n/**\n * Creates a 2d array of canvas dimensions either from the default testSizes\n * object or the width/height/min/step values provided.\n *\n * @param   {object} settings\n * @param   {number} settings.width\n * @param   {number} settings.height\n * @param   {number} settings.min\n * @param   {number} settings.step\n * @param   {number[][]} settings.sizes\n * @returns {number[][]}\n */\nfunction createSizesArray(settings) {\n    const isArea   = settings.width === settings.height;\n    const isWidth  = settings.height === 1;\n    const isHeight = settings.width === 1;\n    const sizes    = [];\n\n    // Use settings.sizes\n    if (!settings.width || !settings.height) {\n        settings.sizes.forEach(testSize => {\n            const width  = isArea || isWidth ? testSize : 1;\n            const height = isArea || isHeight ? testSize : 1;\n\n            sizes.push([width, height]);\n        });\n    }\n    // Generate sizes from width, height, and step\n    else {\n        const testMin  = settings.min || defaults.min;\n        const testStep = settings.step || defaults.step;\n        let   testSize = Math.max(settings.width, settings.height);\n\n        while (testSize > testMin) {\n            const width  = isArea || isWidth ? testSize : 1;\n            const height = isArea || isHeight ? testSize : 1;\n\n            sizes.push([width, height]);\n            testSize -= testStep;\n        }\n\n        sizes.push([testMin, testMin]);\n    }\n\n    return sizes;\n}\n\n\n// Methods\n// =============================================================================\nconst canvasSize = {\n    /**\n     * Determines maximum area of an HTML canvas element. When `max` is\n     * unspecified, an optimized test will be performed using known maximum\n     * values from a variety of browsers and platforms.\n     *\n     * @param {object} [options]\n     * @param {number} [options.max]\n     * @param {number} [options.min=1]\n     * @param {number} [options.step=1024]\n     * @param {function} [options.onError]\n     * @param {function} [options.onSuccess]\n     */\n    maxArea(options = {}) {\n        const sizes = createSizesArray({\n            width : options.max,\n            height: options.max,\n            min   : options.min,\n            step  : options.step,\n            sizes : [...testSizes.area]\n        });\n        const settings = Object.assign({}, defaults, options, { sizes });\n\n        canvasTestLoop(settings);\n    },\n\n    /**\n     * Determines maximum height of an HTML canvas element. When `max` is\n     * unspecified, an optimized test will be performed using known maximum\n     * values from a variety of browsers and platforms.\n     *\n     * @param {object} [options]\n     * @param {number} [options.max]\n     * @param {number} [options.min=1]\n     * @param {number} [options.step=1024]\n     * @param {function} [options.onError]\n     * @param {function} [options.onSuccess]\n     */\n    maxHeight(options = {}) {\n        const sizes = createSizesArray({\n            width : 1,\n            height: options.max,\n            min   : options.min,\n            step  : options.step,\n            sizes : [...testSizes.height]\n        });\n        const settings = Object.assign({}, defaults, options, { sizes });\n\n        canvasTestLoop(settings);\n    },\n\n    /**\n     * Determines maximum width of an HTML canvas element. When `max` is\n     * unspecified, an optimized test will be performed using known maximum\n     * values from a variety of browsers and platforms.\n     *\n     * @param {object} [options]\n     * @param {number} [options.max]\n     * @param {number} [options.min=1]\n     * @param {number} [options.step=1024]\n     * @param {function} [options.onError]\n     * @param {function} [options.onSuccess]\n     */\n    maxWidth(options = {}) {\n        const sizes = createSizesArray({\n            width : options.max,\n            height: 1,\n            min   : options.min,\n            step  : options.step,\n            sizes : [...testSizes.width]\n        });\n        const settings = Object.assign({}, defaults, options, { sizes });\n\n        canvasTestLoop(settings);\n    },\n\n    /**\n     * Tests ability to read pixel data from canvas of specified dimension(s).\n     *\n     * @param {object} [options]\n     * @param {number} [options.width]\n     * @param {number} [options.height]\n     * @param {number[][]} [options.sizes]\n     * @param {function} [options.onError]\n     * @param {function} [options.onSuccess]\n     */\n    test(options = {}) {\n        const settings = Object.assign({}, defaults, options);\n\n        if (settings.sizes.length) {\n            settings.sizes = [...options.sizes];\n            canvasTestLoop(settings);\n        }\n        else {\n            canvasTest(settings);\n        }\n    }\n};\n\n\n// Exports\n// =============================================================================\nexport default canvasSize;","function createWorker(fn) {\n    const js      = `(${fn.toString()})()`;\n    const blob    = new Blob([js], { type: 'application/javascript' });\n    const blobURL = URL.createObjectURL(blob);\n    const worker  = new Worker(blobURL);\n\n    URL.revokeObjectURL(blobURL);\n\n    return worker;\n}\n\nexport default createWorker;\n","/* istanbul ignore next */\nexport default function canvasWorker() {\n    function canvasTest(settings) {\n        const { job, width, height, fill } = settings;\n        const cvs = new OffscreenCanvas(width, height);\n        const ctx = cvs.getContext('2d');\n\n        ctx.fillRect.apply(ctx, fill);\n\n        // Verify image data (Pass = 255, Fail = 0)\n        const isTestPass = Boolean(ctx.getImageData.apply(ctx, fill).data[3]);\n\n        self.postMessage({\n            job,\n            width,\n            height,\n            isTestPass\n        });\n    }\n\n    self.onmessage = function(e) {\n        canvasTest(e.data);\n    };\n}\n"],"names":["worker","defaults","max","min","sizes","step","onError","Function","prototype","onSuccess","testSizes","area","height","width","canvasTest","settings","fill","job","Date","now","document","addEventListener","e","detail","isTestPass","benchmark","postMessage","cvs","createElement","ctx","getContext","fillRect","apply","Boolean","getImageData","data","canvasTestLoop","shift","length","createSizesArray","isArea","isWidth","isHeight","testMin","testStep","testSize","Math","push","forEach","window","fn","js","toString","blob","Blob","type","blobURL","URL","createObjectURL","Worker","revokeObjectURL","createWorker","self","onmessage","OffscreenCanvas","dispatchEvent","CustomEvent","maxArea","options","_extends","maxHeight","maxWidth","test"],"mappings":"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"}