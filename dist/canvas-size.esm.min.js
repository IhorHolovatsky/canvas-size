/*!
 * canvas-size
 * v1.0.2
 * https://github.com/jhildenbiddle/canvas-size
 * (c) 2018 John Hildenbiddle <http://hildenbiddle.com>
 * MIT license
 */
const cvs=document?document.createElement("canvas"):null,ctx=cvs&&cvs.getContext?cvs.getContext("2d"):null,defaults={max:null,min:1,sizes:[],step:1024,onError:Function.prototype,onSuccess:Function.prototype},testSizes={area:[16384,14188,11402,10836,11180,8192,4096,defaults.min],height:[8388607,32767,16384,8192,4096,defaults.min],width:[4194303,32767,16384,8192,4096,defaults.min]};function canvasTest(a,e){const s=a-1,n=e-1;try{return cvs.width=a,cvs.height=e,ctx.fillRect(s,n,1,1),Boolean(ctx.getImageData(s,n,1,1).data[3])}catch(a){return!1}}function canvasTestLoop(a){const e=a.sizes.shift(),s=e[0],n=e[1];canvasTest(s,n)?a.onSuccess(s,n):(a.onError(s,n),a.sizes.length&&setTimeout(function(){canvasTestLoop(a)},0))}function createSizesArray(a){const e=a.width===a.height,s=1===a.height,n=1===a.width,c=[];if(a.width&&a.height){const t=a.min||defaults.min,o=a.step||defaults.step;let l=Math.max(a.width,a.height);for(;l>t;){const a=e||s?l:1,t=e||n?l:1;c.push([a,t]),l-=o}c.push([t,t])}else a.sizes.forEach(a=>{const t=e||s?a:1,o=e||n?a:1;c.push([t,o])});return c}const canvasSize={maxArea(){let a=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};const e=createSizesArray({width:a.max,height:a.max,min:a.min,step:a.step,sizes:[...testSizes.area]});canvasTestLoop(Object.assign({},defaults,a,{sizes:e}))},maxHeight(){let a=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};const e=createSizesArray({width:1,height:a.max,min:a.min,step:a.step,sizes:[...testSizes.height]});canvasTestLoop(Object.assign({},defaults,a,{sizes:e}))},maxWidth(){let a=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};const e=createSizesArray({width:a.max,height:1,min:a.min,step:a.step,sizes:[...testSizes.width]});canvasTestLoop(Object.assign({},defaults,a,{sizes:e}))},test(){let a=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};const e=Object.assign({},defaults,a);if(!e.sizes.length){return canvasTest(e.width,e.height)}e.sizes=[...a.sizes],canvasTestLoop(e)}};export default canvasSize;
//# sourceMappingURL=canvas-size.esm.min.js.map
