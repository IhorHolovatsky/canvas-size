/*!
 * canvas-size
 * v1.0.4
 * https://github.com/jhildenbiddle/canvas-size
 * (c) 2015-2019 John Hildenbiddle <http://hildenbiddle.com>
 * MIT license
 */
const t={max:null,min:1,sizes:[],step:1024,onError:Function.prototype,onSuccess:Function.prototype},e={area:[16384,14188,11402,10836,11180,8192,4096,t.min],height:[8388607,32767,16384,8192,4096,t.min],width:[4194303,32767,16384,8192,4096,t.min]};function i(t,e){const i=document?document.createElement("canvas"):null,s=i&&i.getContext?i.getContext("2d"):null,n=t-1,h=e-1;try{return i.width=t,i.height=e,s.fillRect(n,h,1,1),Boolean(s.getImageData(n,h,1,1).data[3])}catch(t){return!1}}function s(t){const e=t.sizes.shift(),n=e[0],h=e[1];i(n,h)?t.onSuccess(n,h):(t.onError(n,h),t.sizes.length&&setTimeout(function(){s(t)},0))}function n(e){const i=e.width===e.height,s=1===e.height,n=1===e.width,h=[];if(e.width&&e.height){const o=e.min||t.min,c=e.step||t.step;let a=Math.max(e.width,e.height);for(;a>o;){const t=i||s?a:1,e=i||n?a:1;h.push([t,e]),a-=c}h.push([o,o])}else e.sizes.forEach(t=>{const e=i||s?t:1,o=i||n?t:1;h.push([e,o])});return h}export default{maxArea(){let i=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};const h=n({width:i.max,height:i.max,min:i.min,step:i.step,sizes:[...e.area]});s(Object.assign({},t,i,{sizes:h}))},maxHeight(){let i=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};const h=n({width:1,height:i.max,min:i.min,step:i.step,sizes:[...e.height]});s(Object.assign({},t,i,{sizes:h}))},maxWidth(){let i=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};const h=n({width:i.max,height:1,min:i.min,step:i.step,sizes:[...e.width]});s(Object.assign({},t,i,{sizes:h}))},test(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};const n=Object.assign({},t,e);if(!n.sizes.length){return i(n.width,n.height)}n.sizes=[...e.sizes],s(n)}};
//# sourceMappingURL=canvas-size.esm.min.js.map
