/*!
 * canvas-size
 * v1.0.2
 * https://github.com/jhildenbiddle/canvas-size
 * (c) 2015-2019 John Hildenbiddle <http://hildenbiddle.com>
 * MIT license
 */
const t=document?document.createElement("canvas"):null,e=t&&t.getContext?t.getContext("2d"):null,i={max:null,min:1,sizes:[],step:1024,onError:Function.prototype,onSuccess:Function.prototype},s={area:[16384,14188,11402,10836,11180,8192,4096,i.min],height:[8388607,32767,16384,8192,4096,i.min],width:[4194303,32767,16384,8192,4096,i.min]};function n(i,s){const n=i-1,h=s-1;try{return t.width=i,t.height=s,e.fillRect(n,h,1,1),Boolean(e.getImageData(n,h,1,1).data[3])}catch(t){return!1}}function h(t){const e=t.sizes.shift(),i=e[0],s=e[1];n(i,s)?t.onSuccess(i,s):(t.onError(i,s),t.sizes.length&&setTimeout(function(){h(t)},0))}function o(t){const e=t.width===t.height,s=1===t.height,n=1===t.width,h=[];if(t.width&&t.height){const o=t.min||i.min,c=t.step||i.step;let a=Math.max(t.width,t.height);for(;a>o;){const t=e||s?a:1,i=e||n?a:1;h.push([t,i]),a-=c}h.push([o,o])}else t.sizes.forEach(t=>{const i=e||s?t:1,o=e||n?t:1;h.push([i,o])});return h}export default{maxArea(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};const e=o({width:t.max,height:t.max,min:t.min,step:t.step,sizes:[...s.area]});h(Object.assign({},i,t,{sizes:e}))},maxHeight(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};const e=o({width:1,height:t.max,min:t.min,step:t.step,sizes:[...s.height]});h(Object.assign({},i,t,{sizes:e}))},maxWidth(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};const e=o({width:t.max,height:1,min:t.min,step:t.step,sizes:[...s.width]});h(Object.assign({},i,t,{sizes:e}))},test(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};const e=Object.assign({},i,t);if(!e.sizes.length){return n(e.width,e.height)}e.sizes=[...t.sizes],h(e)}};
//# sourceMappingURL=canvas-size.esm.min.js.map
