/*!
 * canvas-size
 * v1.1.0
 * https://github.com/jhildenbiddle/canvas-size
 * (c) 2015-2020 John Hildenbiddle <http://hildenbiddle.com>
 * MIT license
 */
var e,t,i,s,n=window&&window.HTMLCanvasElement;function r(h){if(!n)return!1;var[a,o]=h.sizes.shift(),m=[a-1,o-1,1,1],g=Date.now();i.width=a,i.height=o,s.fillRect.apply(s,m),e.width=1,e.height=1,t.drawImage(i,0-(a-1),0-(o-1));var c=Boolean(t.getImageData(0,0,1,1).data[3]),d=Date.now()-g;return c?h.onSuccess(a,o,d):(h.onError(a,o,d),h.sizes.length&&r(h)),c}function h(e){return new Promise((t,i)=>{r(Object.assign({},e,{onError(t,s,n){e.onError&&e.onError(t,s,n),0===e.sizes.length&&i({width:t,height:s,benchmark:n})},onSuccess(i,s,n){e.onSuccess&&e.onSuccess(i,s,n),t({width:i,height:s,benchmark:n})}}))})}n&&(e=document.createElement("canvas"),t=e.getContext("2d"),i=document.createElement("canvas"),s=i.getContext("2d"));var a={max:null,min:1,sizes:[],step:1024,usePromise:!1,onError:Function.prototype,onSuccess:Function.prototype},o={area:[32767,16384,14188,11402,10836,11180,8192,4096,a.min],height:[8388607,65535,32767,16384,8192,4096,a.min],width:[4194303,65535,32767,16384,8192,4096,a.min]};function m(e){var t=e.width===e.height,i=1===e.height,s=1===e.width,n=[];if(e.width&&e.height)for(var r=e.min||a.min,h=e.step||a.step,o=Math.max(e.width,e.height);o>=r;){var m=t||i?o:1,g=t||s?o:1;n.push([m,g]),o-=h}else e.sizes.forEach(e=>{var r=t||i?e:1,h=t||s?e:1;n.push([r,h])});return n}var g={maxArea(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=m({width:e.max,height:e.max,min:e.min,step:e.step,sizes:[...o.area]}),i=Object.assign({},a,e,{sizes:t});if(i.usePromise)return h(i);r(i)},maxHeight(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=m({width:1,height:e.max,min:e.min,step:e.step,sizes:[...o.height]}),i=Object.assign({},a,e,{sizes:t});if(i.usePromise)return h(i);r(i)},maxWidth(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=m({width:e.max,height:1,min:e.min,step:e.step,sizes:[...o.width]}),i=Object.assign({},a,e,{sizes:t});if(i.usePromise)return h(i);r(i)},test(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=Object.assign({},a,e);return t.sizes=[...t.sizes],t.width&&t.height&&(t.sizes=[[t.width,t.height]]),t.usePromise?h(t):r(t)}};export default g;
//# sourceMappingURL=canvas-size.esm.min.js.map
