/*!
 * canvas-size
 * v0.0.0
 * https://github.com/jhildenbiddle/canvas-size
 * (c) 2018 John Hildenbiddle <http://hildenbiddle.com>
 * MIT license
 */
const cvs=document?document.createElement("canvas"):null,ctx=cvs&&cvs.getContext?cvs.getContext("2d"):null,defaults={step:1024,onError:Function.prototype,onSuccess:Function.prototype};function canvasLoop(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};const e=(arguments.length>1?arguments[1]:void 0)||Object.assign({},defaults,t);if(canvasTest(e.maxHeight,e.maxWidth))e.onSuccess(e.maxHeight,e.maxWidth);else{const t=e.maxHeight>e.minHeight||e.maxWidth>e.minWidth;e.onError(e.maxHeight,e.maxWidth),t&&(e.maxWidth=Math.max(e.maxWidth-e.step,e.minWidth),e.maxHeight=Math.max(e.maxHeight-e.step,e.minHeight),setTimeout(function(){canvasLoop(null,e)},0))}}function canvasTest(t,e){const i=e-1,a=t-1;try{return cvs.width=e,cvs.height=t,ctx.fillRect(i,a,1,1),Boolean(ctx.getImageData(i,a,1,1).data[3])}catch(t){return!1}}const canvasSize={maxArea(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};canvasLoop(Object.assign({},defaults,t,{minHeight:t.min||1,maxHeight:t.max||16384,minWidth:t.min||1,maxWidth:t.max||16384}))},maxHeight(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};canvasLoop(Object.assign({},defaults,t,{minHeight:t.min||1,maxHeight:t.max||32767,minWidth:1,maxWidth:1}))},maxWidth(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};canvasLoop(Object.assign({},defaults,t,{minHeight:1,maxHeight:1,minWidth:t.min||1,maxWidth:t.max||32767}))},test(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};const e=Object.assign({},defaults,t,{height:t.height||1,width:t.width||1});canvasTest(e.height,e.width)?e.onSuccess(e.height,e.width):e.onError(e.height,e.width)}};export default canvasSize;
//# sourceMappingURL=canvas-size.esm.min.js.map
