/*!
 * canvas-size
 * v0.0.0
 * https://github.com/jhildenbiddle/canvas-size
 * (c) 2018 John Hildenbiddle <http://hildenbiddle.com>
 * MIT license
 */
const cvs=document?document.createElement("canvas"):null,ctx=cvs&&cvs.getContext?cvs.getContext("2d"):null,defaults={max:null,min:1,sizes:[],step:1024,onError:Function.prototype,onSuccess:Function.prototype},testSizes={area:[16384,14188,11402,10836,11180,8192,4096,defaults.min],height:[8388607,32767,16384,8192,4096,defaults.min],width:[4194303,32767,16384,8192,4096,defaults.min]};function canvasTest(t,e){const s=t-1,i=e-1;try{return cvs.width=t,cvs.height=e,ctx.fillRect(s,i,1,1),Boolean(ctx.getImageData(s,i,1,1).data[3])}catch(t){return!1}}function canvasTestLoop(t){const e=t.sizes.shift(),s=e[0],i=e[1];canvasTest(s,i)?t.onSuccess(s,i):(t.onError(s,i),t.sizes.length&&setTimeout(function(){canvasTestLoop(t)},0))}function getMaxSizes(t){const e=t.width===t.height,s=1===t.height,i=1===t.width,n=[];if(t.width&&t.height){const a=t.min||defaults.min,o=t.step||defaults.step;let c=Math.max(t.width,t.height);for(;c>a;){const t=e||s?c:1,a=e||i?c:1;n.push([t,a]),c-=o}n.push([a,a])}else t.sizes.forEach(t=>{const a=e||s?t:1,o=e||i?t:1;n.push([a,o])});return n}const canvasSize={maxArea(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};const e=getMaxSizes({width:t.max,height:t.max,min:t.min,step:t.step,sizes:[...testSizes.area]});canvasTestLoop(Object.assign({},defaults,t,{sizes:e}))},maxHeight(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};const e=getMaxSizes({width:1,height:t.max,min:t.min,step:t.step,sizes:[...testSizes.height]});canvasTestLoop(Object.assign({},defaults,t,{sizes:e}))},maxWidth(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};const e=getMaxSizes({width:t.max,height:1,min:t.min,step:t.step,sizes:[...testSizes.width]});canvasTestLoop(Object.assign({},defaults,t,{sizes:e}))},test(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};const e=Object.assign({},defaults,t);if(e.sizes.length)e.sizes=[...t.sizes],canvasTestLoop(e);else{canvasTest(e.width,e.height)?e.onSuccess(e.height,e.width):e.onError(e.height,e.width)}}};export default canvasSize;
//# sourceMappingURL=canvas-size.esm.min.js.map
