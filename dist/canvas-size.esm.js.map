{"version":3,"file":"canvas-size.esm.js","sources":["../src/canvas-test.js","../src/index.js"],"sourcesContent":["/* eslint-env browser, worker */\n\n/**\n * Tests ability to read pixel data from canvas elements of various dimensions\n * by decreasing canvas height and/or width until a test succeeds.\n *\n * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n * IMPORTANT: ONLY USE ES5 CODE IN THIS FUNCTION (I.E. NO BABEL TRANSPILATION)\n *            This function will be used both on the main thread and as part of\n *            an inline web worker. If this code is transpiled from ES6+ to ES5,\n *            the main thread will have access to Babel's helper functions but\n *            the web worker scope will.\n * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n *\n * @param {object} settings\n * @param {number[][]} settings.sizes\n * @param {function} settings.onError\n * @param {function} settings.onSuccess\n */\nfunction canvasTest(settings) {\n    const size     = settings.sizes.shift();\n    const width    = size[0];\n    const height   = size[1];\n    const fill     = [width - 1, height - 1, 1, 1]; // x, y, width, height\n    const job      = Date.now();\n    const isWorker = typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope;\n\n    let cropCvs, testCvs;\n\n    if (isWorker) {\n        cropCvs = new OffscreenCanvas(1, 1);\n        testCvs = new OffscreenCanvas(width, height);\n    }\n    else {\n        cropCvs = document.createElement('canvas');\n        cropCvs.width = 1;\n        cropCvs.height = 1;\n        testCvs = document.createElement('canvas');\n        testCvs.width = width;\n        testCvs.height = height;\n    }\n\n    const cropCtx = cropCvs.getContext('2d');\n    const testCtx = testCvs.getContext('2d');\n\n    testCtx.fillRect.apply(testCtx, fill);\n\n    // Render the test pixel in the bottom-right corner of the\n    // test canvas in the top-left of the 1x1 crop canvas. This\n    // dramatically reducing the time for getImageData to complete.\n    cropCtx.drawImage(testCvs, width - 1, width - 1, 1, 1, 0, 0, 1, 1);\n\n    // Verify image data (Pass = 255, Fail = 0)\n    const isTestPass = cropCtx.getImageData(0, 0, 1, 1).data[3] !== 0;\n    const benchmark  = Date.now() - job; // milliseconds\n\n    // Running in a web worker\n    if (isWorker) {\n        postMessage({\n            width,\n            height,\n            benchmark,\n            isTestPass\n        });\n\n        if (!isTestPass && settings.sizes.length) {\n            canvasTest(settings);\n        }\n    }\n    else if (isTestPass) {\n        settings.onSuccess(width, height, benchmark);\n    }\n    else {\n        settings.onError(width, height, benchmark);\n\n        if (settings.sizes.length) {\n            canvasTest(settings);\n        }\n    }\n\n    return isTestPass;\n}\n\nexport default canvasTest;\n","import canvasTest from './canvas-test';\n\n// Constants & Variables\n// =============================================================================\nconst defaults = {\n    max       : null,\n    min       : 1,\n    sizes     : [],\n    step      : 1024,\n    usePromise: false,\n    useWorker : false,\n    // Callbacks\n    onError   : Function.prototype,\n    onSuccess : Function.prototype\n};\nconst testSizes = {\n    area: [\n        // Future Browsers?\n        32767,\n        // Chrome 70 (Mac, Win)\n        // Chrome 68 (Android 4.4)\n        // Edge 17 (Win)\n        // Safari 7-12 (Mac)\n        16384,\n        // Chrome 68 (Android 7.1-9)\n        14188,\n        // Chrome 68 (Android 5),\n        11402,\n        // Chrome 68 (Android 6)\n        10836,\n        // Firefox 63 (Mac, Win)\n        11180,\n        // IE 9-11 (Win)\n        8192,\n        // IE Mobile (Windows Phone 8.x)\n        // Safari (iOS 9 - 12)\n        4096,\n        // Failed\n        defaults.min\n    ],\n    height: [\n        // Safari 7-12 (Mac)\n        // Safari (iOS 9-12)\n        8388607,\n        // Chrome 83 (Mac, Win)\n        65535,\n        // Chrome 70 (Mac, Win)\n        // Chrome 68 (Android 4.4-9)\n        // Firefox 63 (Mac, Win)\n        32767,\n        // IE11\n        // Edge 17 (Win)\n        16384,\n        // IE 9-10 (Win)\n        8192,\n        // IE Mobile (Windows Phone 8.x)\n        4096,\n        // Failed\n        defaults.min\n    ],\n    width: [\n        // Safari 7-12 (Mac)\n        // Safari (iOS 9-12)\n        4194303,\n        // Chrome 83 (Mac, Win)\n        65535,\n        // Chrome 70 (Mac, Win)\n        // Chrome 68 (Android 4.4-9)\n        // Firefox 63 (Mac, Win)\n        32767,\n        // IE11\n        // Edge 17 (Win)\n        16384,\n        // IE 9-10 (Win)\n        8192,\n        // IE Mobile (Windows Phone 8.x)\n        4096,\n        // Failed\n        defaults.min\n    ]\n};\nconst workerJobs = {\n    // jobID: {\n    //     onError: fn(),\n    //     onSuccess: fn()\n    // }\n};\n\n\n// Functions (Private)\n// =============================================================================\n/**\n * Creates a 2d array of canvas dimensions either from the default testSizes\n * object or the width/height/min/step values provided.\n *\n * @param   {object} settings\n * @param   {number} settings.width\n * @param   {number} settings.height\n * @param   {number} settings.min\n * @param   {number} settings.step\n * @param   {number[][]} settings.sizes\n * @returns {number[][]}\n */\nfunction createSizesArray(settings) {\n    const isArea   = settings.width === settings.height;\n    const isWidth  = settings.height === 1;\n    const isHeight = settings.width === 1;\n    const sizes    = [];\n\n    // Use settings.sizes\n    if (!settings.width || !settings.height) {\n        settings.sizes.forEach(testSize => {\n            const width  = isArea || isWidth ? testSize : 1;\n            const height = isArea || isHeight ? testSize : 1;\n\n            sizes.push([width, height]);\n        });\n    }\n    // Generate sizes from width, height, and step\n    else {\n        const testMin  = settings.min || defaults.min;\n        const testStep = settings.step || defaults.step;\n        let   testSize = Math.max(settings.width, settings.height);\n\n        while (testSize >= testMin) {\n            const width  = isArea || isWidth ? testSize : 1;\n            const height = isArea || isHeight ? testSize : 1;\n\n            sizes.push([width, height]);\n            testSize -= testStep;\n        }\n    }\n\n    return sizes;\n}\n\n/**\n * Handles calls from maxArea(), maxHeight(), maxWidth(), and test() methods.\n *\n * @param {object} settings\n * @param {number[][]} settings.sizes\n * @param {function} settings.onError\n * @param {function} settings.onSuccess\n */\nfunction handleMethod(settings) {\n    const hasCanvasSupport = window && window.HTMLCanvasElement;\n    const jobID            = Date.now();\n\n    /* istanbul ignore if */\n    if (!hasCanvasSupport) {\n        return false;\n    }\n\n    // Web Worker\n    if (settings.useWorker && window && ('OffscreenCanvas' in window)) {\n        const js = `\n            ${canvasTest.toString()}\n            onmessage = function(e) {\n                canvasTest(e.data);\n            };\n        `;\n        const blob    = new Blob([js], { type: 'application/javascript' });\n        const blobURL = URL.createObjectURL(blob);\n        const worker  = new Worker(blobURL);\n        const { onError, onSuccess, ...workerSettings } = settings;\n\n        URL.revokeObjectURL(blobURL);\n\n        // Store callbacks in workerJobs object\n        workerJobs[jobID] = { onError, onSuccess };\n\n        // Listen for messages from worker\n        worker.onmessage = function(e) {\n            const { width, height, benchmark, isTestPass } = e.data;\n\n            if (isTestPass) {\n                workerJobs[jobID].onSuccess(width, height, benchmark);\n\n                delete workerJobs[jobID];\n            }\n            else {\n                workerJobs[jobID].onError(width, height, benchmark);\n            }\n        };\n\n        // Send message to work\n        worker.postMessage(workerSettings);\n    }\n    // Promise\n    else if (settings.usePromise) {\n        return new Promise((resolve, reject) => {\n            // Modify callbacks resolve/reject Promise\n            const newSettings = Object.assign({}, settings, {\n                onError(width, height, benchmark) {\n                    /* istanbul ignore else */\n                    if (settings.onError) {\n                        settings.onError(width, height, benchmark);\n                    }\n                    if (settings.sizes.length === 0) {\n                        reject({ width, height, benchmark });\n                    }\n                },\n                onSuccess(width, height, benchmark) {\n                    /* istanbul ignore else */\n                    if (settings.onSuccess) {\n                        settings.onSuccess(width, height, benchmark);\n                    }\n\n                    resolve({ width, height, benchmark });\n                }\n            });\n\n            canvasTest(newSettings);\n        });\n    }\n    // Standard Callbacks\n    else {\n        return canvasTest(settings);\n    }\n}\n\n\n// Methods\n// =============================================================================\nconst canvasSize = {\n    /**\n     * Determines maximum area of an HTML canvas element. When `max` is\n     * unspecified, an optimized test will be performed using known maximum\n     * values from a variety of browsers and platforms.\n     *\n     * @param {object} [options]\n     * @param {number} [options.max]\n     * @param {number} [options.min=1]\n     * @param {number} [options.step=1024]\n     * @param {boolean} [options.usePromise=false]\n     * @param {function} [options.onError]\n     * @param {function} [options.onSuccess]\n     */\n    maxArea(options = {}) {\n        const sizes = createSizesArray({\n            width : options.max,\n            height: options.max,\n            min   : options.min,\n            step  : options.step,\n            sizes : [...testSizes.area]\n        });\n        const settings = Object.assign({}, defaults, options, { sizes });\n\n        return handleMethod(settings);\n    },\n\n    /**\n     * Determines maximum height of an HTML canvas element. When `max` is\n     * unspecified, an optimized test will be performed using known maximum\n     * values from a variety of browsers and platforms.\n     *\n     * @param {object} [options]\n     * @param {number} [options.max]\n     * @param {number} [options.min=1]\n     * @param {number} [options.step=1024]\n     * @param {boolean} [options.usePromise=false]\n     * @param {function} [options.onError]\n     * @param {function} [options.onSuccess]\n     */\n    maxHeight(options = {}) {\n        const sizes = createSizesArray({\n            width : 1,\n            height: options.max,\n            min   : options.min,\n            step  : options.step,\n            sizes : [...testSizes.height]\n        });\n        const settings = Object.assign({}, defaults, options, { sizes });\n\n        return handleMethod(settings);\n    },\n\n    /**\n     * Determines maximum width of an HTML canvas element. When `max` is\n     * unspecified, an optimized test will be performed using known maximum\n     * values from a variety of browsers and platforms.\n     *\n     * @param {object} [options]\n     * @param {number} [options.max]\n     * @param {number} [options.min=1]\n     * @param {number} [options.step=1024]\n     * @param {boolean} [options.usePromise=false]\n     * @param {function} [options.onError]\n     * @param {function} [options.onSuccess]\n     */\n    maxWidth(options = {}) {\n        const sizes = createSizesArray({\n            width : options.max,\n            height: 1,\n            min   : options.min,\n            step  : options.step,\n            sizes : [...testSizes.width]\n        });\n        const settings = Object.assign({}, defaults, options, { sizes });\n\n        return handleMethod(settings);\n    },\n\n    /**\n     * Tests ability to read pixel data from canvas of specified dimension(s).\n     *\n     * @param {object} [options]\n     * @param {number} [options.width]\n     * @param {number} [options.height]\n     * @param {number[][]} [options.sizes]\n     * @param {boolean} [options.usePromise=false]\n     * @param {function} [options.onError]\n     * @param {function} [options.onSuccess]\n     */\n    test(options = {}) {\n        const settings = Object.assign({}, defaults, options);\n\n        // Prevent mutation of sizes array if referencing user array\n        settings.sizes = [...settings.sizes];\n\n        if (settings.width && settings.height) {\n            settings.sizes = [[settings.width, settings.height]];\n        }\n\n        return handleMethod(settings);\n    }\n};\n\n\n// Exports\n// =============================================================================\nexport default canvasSize;"],"names":["canvasTest","settings","size","sizes","shift","width","height","fill","job","Date","now","isWorker","WorkerGlobalScope","self","cropCvs","testCvs","OffscreenCanvas","document","createElement","cropCtx","getContext","testCtx","fillRect","apply","drawImage","isTestPass","getImageData","data","benchmark","postMessage","length","onSuccess","onError","defaults","max","min","step","usePromise","useWorker","Function","prototype","testSizes","area","workerJobs","createSizesArray","isArea","isWidth","isHeight","forEach","testSize","push","testMin","testStep","Math","handleMethod","hasCanvasSupport","window","HTMLCanvasElement","jobID","js","toString","blob","Blob","type","blobURL","URL","createObjectURL","worker","Worker","workerSettings","revokeObjectURL","onmessage","e","Promise","resolve","reject","newSettings","Object","assign","canvasSize","maxArea","options","maxHeight","maxWidth","test"],"mappings":"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"}