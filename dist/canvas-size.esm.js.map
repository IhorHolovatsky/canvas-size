{"version":3,"file":"canvas-size.esm.js","sources":["../src/worker.js","../src/index.js"],"sourcesContent":["/* istanbul ignore next */\nexport default function() {\n    function workerCanvasTest(settings) {\n        const { job, cvs, width, height, fill } = settings;\n        const ctx = cvs.getContext('2d');\n\n        ctx.fillRect.apply(ctx, fill);\n        self.postMessage({\n            job,\n            width,\n            height,\n            // Verify image data (Pass = 255, Fail = 0)\n            result: Boolean(ctx.getImageData.apply(ctx, fill).data[3])\n        });\n    }\n\n    self.onmessage = function(e) {\n        workerCanvasTest(e.data);\n    };\n}\n","import canvasWorker from './worker.js';\n\n\n// Constants & Variables\n// =============================================================================\nconst defaults = {\n    max  : null,\n    min  : 1,\n    sizes: [],\n    step : 1024,\n    // Callbacks\n    onError  : Function.prototype,\n    onSuccess: Function.prototype\n};\nconst testSizes = {\n    area: [\n        // Chrome 70 (Mac, Win)\n        // Chrome 68 (Android 4.4)\n        // Edge 17 (Win)\n        // Safari 7-12 (Mac)\n        16384,\n        // Chrome 68 (Android 7.1-9)\n        14188,\n        // Chrome 68 (Android 5),\n        11402,\n        // Chrome 68 (Android 6)\n        10836,\n        // Firefox 63 (Mac, Win)\n        11180,\n        // IE 9-11 (Win)\n        8192,\n        // IE Mobile (Windows Phone 8.x)\n        // Safari (iOS 9 - 12)\n        4096,\n        // Failed\n        defaults.min\n    ],\n    height: [\n        // Safari 7-12 (Mac)\n        // Safari (iOS 9-12)\n        8388607,\n        // Chrome 70 (Mac, Win)\n        // Chrome 68 (Android 4.4-9)\n        // Firefox 63 (Mac, Win)\n        32767,\n        // IE11\n        // Edge 17 (Win)\n        16384,\n        // IE 9-10 (Win)\n        8192,\n        // IE Mobile (Windows Phone 8.x)\n        4096,\n        // Failed\n        defaults.min\n    ],\n    width: [\n        // Safari 7-12 (Mac)\n        // Safari (iOS 9-12)\n        4194303,\n        // Chrome 70 (Mac, Win)\n        // Chrome 68 (Android 4.4-9)\n        // Firefox 63 (Mac, Win)\n        32767,\n        // IE11\n        // Edge 17 (Win)\n        16384,\n        // IE 9-10 (Win)\n        8192,\n        // IE Mobile (Windows Phone 8.x)\n        4096,\n        // Failed\n        defaults.min\n    ]\n};\n\n// Web worker reference\nlet worker;\n\n// Generate inline web worker\nif (window && ('OffscreenCanvas' in window) && ('Worker' in window)) {\n    const createWorker = fn => {\n        const js      = `(${fn.toString()})()`;\n        const blob    = new Blob([js], { type: 'application/javascript' });\n        const blobURL = URL.createObjectURL(blob);\n        const worker  = new Worker(blobURL);\n\n        URL.revokeObjectURL(blobURL);\n\n        return worker;\n    };\n\n    worker = createWorker(canvasWorker);\n    worker.onmessage = function(e) {\n        console.log('Done (Worker)', e.data);\n\n        const { width, height, job, result } = e.data;\n\n        document.dispatchEvent(\n            // Dispatch custom event\n            new CustomEvent(job, {\n                detail: {\n                    height,\n                    width,\n                    result\n                }\n            })\n        );\n    };\n}\n\n\n// Functions (Private)\n// =============================================================================\n/**\n * Tests ability to read pixel data from a canvas at a specified dimension.\n *\n * @param {object} settings\n * @param {number} settings.width\n * @param {number} settings.height\n * @param {function} settings.onError\n * @param {function} settings.onSuccess\n *\n * @returns {boolean}\n */\nfunction canvasTest(settings) {\n    const { width, height } = settings;\n    const w = 1; // Width\n    const h = 1; // Height\n    const x = width - 1;  // Right edge\n    const y = height - 1; // Bottom edge\n\n    // Web worker\n    if (worker) {\n        console.log('Worker');\n\n        const cvs = new OffscreenCanvas(width, height);\n        const job = Date.now();\n\n        // Listen for custom job event\n        document.addEventListener(job, function(e) {\n            console.log('Done (Listener)', e.detail);\n\n            const { width, height, result } = e.detail;\n\n            if (result) {\n                settings.onSuccess(width, height);\n            }\n            else {\n                settings.onError(width, height);\n            }\n        }, false);\n\n        // Send canvas reference and test data to web worker\n        worker.postMessage({\n            cvs,\n            fill: [x, y, w, h],\n            height,\n            job,\n            width\n        }, [cvs]);\n    }\n    else {\n        try {\n            console.log('Non-Worker');\n\n            const cvs = document.createElement('canvas');\n            const ctx = cvs.getContext('2d');\n\n            cvs.width = width;\n            cvs.height = height;\n            ctx.fillRect(x, y, w, h);\n\n            // Verify test rectangle image data (Pass = 255, Fail = 0)\n            if (ctx.getImageData(x, y, w, h).data[3]) {\n                settings.onSuccess(width, height);\n            }\n            else {\n                settings.onError(width, height);\n            }\n        }\n        catch(e){\n            settings.onError(width, height);\n        }\n    }\n}\n\n/**\n * Tests ability to read pixel data from canvas elements of various dimensions\n * by decreasing canvas height and/or width until a test succeeds.\n *\n * @param {object} settings\n * @param {number[][]} settings.sizes\n * @param {function} settings.onError\n * @param {function} settings.onSuccess\n */\nfunction canvasTestLoop(settings) {\n    const sizes    = settings.sizes.shift();\n    const width    = sizes[0];\n    const height   = sizes[1];\n    const testPass = canvasTest(width, height);\n\n    if (testPass) {\n        settings.onSuccess(width, height);\n    }\n    else {\n        settings.onError(width, height);\n\n        if (settings.sizes.length) {\n            setTimeout(function(){\n                canvasTestLoop(settings);\n            }, 0);\n        }\n    }\n}\n\n/**\n * Creates a 2d array of canvas dimensions either from the default testSizes\n * object or the width/height/min/step values provided.\n *\n * @param   {object} settings\n * @param   {number} settings.width\n * @param   {number} settings.height\n * @param   {number} settings.min\n * @param   {number} settings.step\n * @param   {number[][]} settings.sizes\n * @returns {number[][]}\n */\nfunction createSizesArray(settings) {\n    const isArea   = settings.width === settings.height;\n    const isWidth  = settings.height === 1;\n    const isHeight = settings.width === 1;\n    const sizes    = [];\n\n    // Use settings.sizes\n    if (!settings.width || !settings.height) {\n        settings.sizes.forEach(testSize => {\n            const width  = isArea || isWidth ? testSize : 1;\n            const height = isArea || isHeight ? testSize : 1;\n\n            sizes.push([width, height]);\n        });\n    }\n    // Generate sizes from width, height, and step\n    else {\n        const testMin  = settings.min || defaults.min;\n        const testStep = settings.step || defaults.step;\n        let   testSize = Math.max(settings.width, settings.height);\n\n        while (testSize > testMin) {\n            const width  = isArea || isWidth ? testSize : 1;\n            const height = isArea || isHeight ? testSize : 1;\n\n            sizes.push([width, height]);\n            testSize -= testStep;\n        }\n\n        sizes.push([testMin, testMin]);\n    }\n\n    return sizes;\n}\n\n\n// Methods\n// =============================================================================\nconst canvasSize = {\n    /**\n     * Determines maximum area of an HTML canvas element. When `max` is\n     * unspecified, an optimized test will be performed using known maximum\n     * values from a variety of browsers and platforms.\n     *\n     * @param {object} [options]\n     * @param {number} [options.max]\n     * @param {number} [options.min=1]\n     * @param {number} [options.step=1024]\n     * @param {function} [options.onError]\n     * @param {function} [options.onSuccess]\n     */\n    maxArea(options = {}) {\n        const sizes = createSizesArray({\n            width : options.max,\n            height: options.max,\n            min   : options.min,\n            step  : options.step,\n            sizes : [...testSizes.area]\n        });\n        const settings = Object.assign({}, defaults, options, { sizes });\n\n        canvasTestLoop(settings);\n    },\n\n    /**\n     * Determines maximum height of an HTML canvas element. When `max` is\n     * unspecified, an optimized test will be performed using known maximum\n     * values from a variety of browsers and platforms.\n     *\n     * @param {object} [options]\n     * @param {number} [options.max]\n     * @param {number} [options.min=1]\n     * @param {number} [options.step=1024]\n     * @param {function} [options.onError]\n     * @param {function} [options.onSuccess]\n     */\n    maxHeight(options = {}) {\n        const sizes = createSizesArray({\n            width : 1,\n            height: options.max,\n            min   : options.min,\n            step  : options.step,\n            sizes : [...testSizes.height]\n        });\n        const settings = Object.assign({}, defaults, options, { sizes });\n\n        canvasTestLoop(settings);\n    },\n\n    /**\n     * Determines maximum width of an HTML canvas element. When `max` is\n     * unspecified, an optimized test will be performed using known maximum\n     * values from a variety of browsers and platforms.\n     *\n     * @param {object} [options]\n     * @param {number} [options.max]\n     * @param {number} [options.min=1]\n     * @param {number} [options.step=1024]\n     * @param {function} [options.onError]\n     * @param {function} [options.onSuccess]\n     */\n    maxWidth(options = {}) {\n        const sizes = createSizesArray({\n            width : options.max,\n            height: 1,\n            min   : options.min,\n            step  : options.step,\n            sizes : [...testSizes.width]\n        });\n        const settings = Object.assign({}, defaults, options, { sizes });\n\n        canvasTestLoop(settings);\n    },\n\n    /**\n     * Tests ability to read pixel data from canvas of specified dimension(s).\n     *\n     * @param {object} [options]\n     * @param {number} [options.width]\n     * @param {number} [options.height]\n     * @param {number[][]} [options.sizes]\n     * @param {function} [options.onError]\n     * @param {function} [options.onSuccess]\n     * @returns {boolean} Returns boolean when width/height is set (not sizes)\n     */\n    test(options = {}) {\n        const settings = Object.assign({}, defaults, options);\n\n        if (settings.sizes.length) {\n            settings.sizes = [...options.sizes];\n            canvasTestLoop(settings);\n        }\n        else {\n            const testPass = canvasTest(settings);\n\n            return testPass;\n        }\n    }\n};\n\n\n// Exports\n// =============================================================================\nexport default canvasSize;"],"names":["workerCanvasTest","settings","job","cvs","width","height","fill","ctx","getContext","fillRect","apply","self","postMessage","result","Boolean","getImageData","data","onmessage","e","defaults","max","min","sizes","step","onError","Function","prototype","onSuccess","testSizes","area","worker","window","createWorker","fn","js","toString","blob","Blob","type","blobURL","URL","createObjectURL","Worker","revokeObjectURL","canvasWorker","console","log","document","dispatchEvent","CustomEvent","detail","canvasTest","w","h","x","y","OffscreenCanvas","Date","now","addEventListener","createElement","canvasTestLoop","shift","testPass","length","setTimeout","createSizesArray","isArea","isWidth","isHeight","forEach","testSize","push","testMin","testStep","Math","canvasSize","maxArea","options","Object","assign","maxHeight","maxWidth","test"],"mappings":"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"}