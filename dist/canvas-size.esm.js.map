{"version":3,"file":"canvas-size.esm.js","sources":["../src/index.js"],"sourcesContent":["// Constants & Variables\n// =============================================================================\nconst cvs      = document ? document.createElement('canvas') : null;\nconst ctx      = cvs && cvs.getContext ? cvs.getContext('2d') : null;\nconst defaults = {\n    max  : null,\n    min  : 1,\n    sizes: [],\n    step : 1024,\n    // Callbacks\n    onError  : Function.prototype,\n    onSuccess: Function.prototype\n};\nconst testSizes = {\n    area: [\n        // Chrome 70 (Mac, Win)\n        // Chrome 68 (Android 4.4)\n        // Edge 17 (Win)\n        // Safari 7-12 (Mac)\n        16384,\n        // Chrome 68 (Android 7.1-9)\n        14188,\n        // Chrome 68 (Android 5),\n        11402,\n        // Chrome 68 (Android 6)\n        10836,\n        // Firefox 63 (Mac, Win)\n        11180,\n        // IE 9-11 (Win)\n        8192,\n        // IE Mobile (Windows Phone 8.x)\n        // Safari (iOS 9 - 12)\n        4096,\n        // Failed\n        defaults.min\n    ],\n    height: [\n        // Safari 7-12 (Mac)\n        // Safari (iOS 9-12)\n        8388607,\n        // Chrome 70 (Mac, Win)\n        // Chrome 68 (Android 4.4-9)\n        // Firefox 63 (Mac, Win)\n        32767,\n        // IE11\n        // Edge 17 (Win)\n        16384,\n        // IE 9-10 (Win)\n        8192,\n        // IE Mobile (Windows Phone 8.x)\n        4096,\n        // Failed\n        defaults.min\n    ],\n    width: [\n        // Safari 7-12 (Mac)\n        // Safari (iOS 9-12)\n        4194303,\n        // Chrome 70 (Mac, Win)\n        // Chrome 68 (Android 4.4-9)\n        // Firefox 63 (Mac, Win)\n        32767,\n        // IE11\n        // Edge 17 (Win)\n        16384,\n        // IE 9-10 (Win)\n        8192,\n        // IE Mobile (Windows Phone 8.x)\n        4096,\n        // Failed\n        defaults.min\n    ]\n};\n\n\n// Functions (Private)\n// =============================================================================\n/**\n * Tests ability to read pixel data from canvas of specified dimensions.\n *\n * @param {number} width\n * @param {number} height\n * @returns {boolean}\n */\nfunction canvasTest(width, height) {\n    // Define test rectangle dimensions and coordinates\n    const w = 1;\n    const h = 1;\n    const x = width - w;  // Right edge\n    const y = height - h; // Bottom edge\n\n    try {\n        // Set sized canvas dimensions and draw test rectangle\n        cvs.width = width;\n        cvs.height = height;\n        ctx.fillRect(x, y, w, h);\n\n        // Verify test rectangle image data (Pass = 255, Fail = 0)\n        return Boolean(ctx.getImageData(x, y, w, h).data[3]);\n    }\n    catch(e){\n        return false;\n    }\n}\n\n/**\n * Tests ability to read pixel data from canvases of various dimensions by\n * decreasing canvas height and/or width until a success test occurs.\n *\n * @param {object} settings\n * @param {number[][]} settings.sizes\n * @param {function} settings.onError\n * @param {function} settings.onSuccess\n */\nfunction canvasTestLoop(settings) {\n    const sizes    = settings.sizes.shift();\n    const width    = sizes[0];\n    const height   = sizes[1];\n    const testPass = canvasTest(width, height);\n\n    if (testPass) {\n        settings.onSuccess(width, height);\n    }\n    else {\n        settings.onError(width, height);\n\n        if (settings.sizes.length) {\n            setTimeout(function(){\n                canvasTestLoop(settings);\n            }, 0);\n        }\n    }\n}\n\n/**\n *\n *\n * @param {object} settings\n * @param {number} settings.width\n * @param {number} settings.height\n * @param {number} settings.min\n * @param {number} settings.step\n * @param {number[][]} settings.sizes\n * @returns\n */\nfunction getMaxSizes(settings) {\n    const isArea   = settings.width === settings.height;\n    const isWidth  = settings.height === 1;\n    const isHeight = settings.width === 1;\n    const sizes    = [];\n\n    // Use settings.sizes\n    if (!settings.width || !settings.height) {\n        settings.sizes.forEach(testSize => {\n            const width  = isArea || isWidth ? testSize : 1;\n            const height = isArea || isHeight ? testSize : 1;\n\n            sizes.push([width, height]);\n        });\n    }\n    // Generate sizes from width, height, and step\n    else {\n        const testMin  = settings.min || defaults.min;\n        const testStep = settings.step || defaults.step;\n        let   testSize = Math.max(settings.width, settings.height);\n\n        while (testSize > testMin) {\n            const width  = isArea || isWidth ? testSize : 1;\n            const height = isArea || isHeight ? testSize : 1;\n\n            sizes.push([width, height]);\n            testSize -= testStep;\n        }\n\n        sizes.push([testMin, testMin]);\n    }\n\n    return sizes;\n}\n\n\n// Methods\n// =============================================================================\nconst canvasSize = {\n    /**\n     * Determines maximum canvas area. Tests begins with the `max` value which\n     * is then reduced by the `step` value until a successful test pass or the\n     * `min` value is reached.\n     *\n     * @param {object} [options]\n     * @param {number} [options.max]\n     * @param {number} [options.min=1]\n     * @param {number} [options.step=1024]\n     * @param {function} [options.onError]\n     * @param {function} [options.onSuccess]\n     */\n    maxArea(options = {}) {\n        const sizes = getMaxSizes({\n            width : options.max,\n            height: options.max,\n            min   : options.min,\n            step  : options.step,\n            sizes : [...testSizes.area]\n        });\n        const settings = Object.assign({}, defaults, options, { sizes });\n\n        canvasTestLoop(settings);\n    },\n\n    /**\n     * Determines maximum canvas height. Tests begins with the `max` value which\n     * is then reduced by the `step` value until a successful test pass or the\n     * `min` value is reached.\n     *\n     * @param {object} [options]\n     * @param {number} [options.max]\n     * @param {number} [options.min=1]\n     * @param {number} [options.step=1024]\n     * @param {function} [options.onError]\n     * @param {function} [options.onSuccess]\n     */\n    maxHeight(options = {}) {\n        const sizes = getMaxSizes({\n            width : 1,\n            height: options.max,\n            min   : options.min,\n            step  : options.step,\n            sizes : [...testSizes.height]\n        });\n        const settings = Object.assign({}, defaults, options, { sizes });\n\n        canvasTestLoop(settings);\n    },\n\n    /**\n     * Determines maximum canvas width. Tests begins with the `max` value which\n     * is then reduced by the `step` value until a successful test pass or the\n     * `min` value is reached.\n     *\n     * @param {object} [options]\n     * @param {number} [options.max]\n     * @param {number} [options.min=1]\n     * @param {number} [options.step=1024]\n     * @param {function} [options.onError]\n     * @param {function} [options.onSuccess]\n     */\n    maxWidth(options = {}) {\n        const sizes = getMaxSizes({\n            width : options.max,\n            height: 1,\n            min   : options.min,\n            step  : options.step,\n            sizes : [...testSizes.width]\n        });\n        const settings = Object.assign({}, defaults, options, { sizes });\n\n        canvasTestLoop(settings);\n    },\n\n    /**\n     * Tests ability to read pixel data from canvas of specified dimensions.\n     *\n     * @param {object} [options]\n     * @param {number} [options.height]\n     * @param {number} [options.width]\n     * @param {number[][]} [options.sizes=[]]\n     * @param {function} [options.onError]\n     * @param {function} [options.onSuccess]\n     */\n    test(options = {}) {\n        const settings = Object.assign({}, defaults, options);\n\n        if (settings.sizes.length) {\n            settings.sizes = [...options.sizes];\n            canvasTestLoop(settings);\n        }\n        else {\n            const testPass = canvasTest(settings.width, settings.height);\n\n            if (testPass) {\n                settings.onSuccess(settings.height, settings.width);\n            }\n            else {\n                settings.onError(settings.height, settings.width);\n            }\n        }\n    }\n};\n\n\n// Exports\n// =============================================================================\nexport default canvasSize;"],"names":["cvs","document","createElement","ctx","getContext","defaults","max","min","sizes","step","onError","Function","prototype","onSuccess","testSizes","area","height","width","canvasTest","w","h","x","y","fillRect","Boolean","getImageData","data","e","canvasTestLoop","settings","shift","testPass","length","setTimeout","getMaxSizes","isArea","isWidth","isHeight","forEach","testSize","push","testMin","testStep","Math","canvasSize","maxArea","options","Object","assign","maxHeight","maxWidth","test"],"mappings":"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"}