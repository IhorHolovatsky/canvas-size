{"version":3,"file":"canvas-size.esm.min.js","sources":["../src/canvas-test.js","../src/index.js"],"sourcesContent":["const hasCanvasSupport = window && window.HTMLCanvasElement;\n\nlet cropCvs, cropCtx, testCvs, testCtx;\n\n/* istanbul ignore else */\nif (hasCanvasSupport) {\n    cropCvs = document.createElement('canvas');\n    cropCtx = cropCvs.getContext('2d');\n    testCvs = document.createElement('canvas');\n    testCtx = testCvs.getContext('2d');\n}\n\n/**\n * Tests ability to read pixel data from canvas elements of various dimensions\n * by decreasing canvas height and/or width until a test succeeds.\n *\n * @param {object} settings\n * @param {number[][]} settings.sizes\n * @param {function} settings.onError\n * @param {function} settings.onSuccess\n */\nfunction canvasTest(settings) {\n    /* istanbul ignore if */\n    if (!hasCanvasSupport) {\n        return false;\n    }\n\n    const [width, height] = settings.sizes.shift();\n    const fill = [width - 1, height - 1, 1, 1]; // x, y, width, height\n    const job = Date.now();\n\n    // Size (which resets) test canvas and render test pixel\n    testCvs.width = width;\n    testCvs.height = height;\n    testCtx.fillRect.apply(testCtx, fill);\n\n    // Size (which resets) crop canvas\n    cropCvs.width = 1;\n    cropCvs.height = 1;\n    // Render the test pixel in the bottom=right corner of the\n    // test canvas in the top-left of the 1x1 crop canvas. This\n    // dramatically reducing the time for getImageData to complete.\n    cropCtx.drawImage(testCvs, 0 - (width - 1), 0 - (height - 1));\n\n    // Verify image data (Pass = 255, Fail = 0)\n    const isTestPass = Boolean(cropCtx.getImageData(0, 0, 1, 1).data[3]);\n    const benchmark = Date.now() - job; // milliseconds\n\n    if (isTestPass) {\n        settings.onSuccess(width, height, benchmark);\n    }\n    else {\n        settings.onError(width, height, benchmark);\n\n        if (settings.sizes.length) {\n            if (window.requestAnimationFrame) {\n                window.requestAnimationFrame(() => {\n                    canvasTest(settings);\n                });\n            }\n            else {\n                canvasTest(settings);\n            }\n        }\n    }\n\n    return isTestPass;\n}\n\n/**\n * Promise-based version of canvasTest()\n *\n * @param   {object} settings\n * @param   {number[][]} settings.sizes\n * @param   {function} settings.onError\n * @param   {function} settings.onSuccess\n * @returns {object} Promise\n */\nfunction canvasTestPromise(settings) {\n    return new Promise((resolve, reject) => {\n        // Modify callbacks resolve/reject Promise\n        const newSettings = Object.assign({}, settings, {\n            onError(width, height, benchmark) {\n                /* istanbul ignore else */\n                if (settings.onError) {\n                    settings.onError(width, height, benchmark);\n                }\n                if (settings.sizes.length === 0) {\n                    reject({ width, height, benchmark });\n                }\n            },\n            onSuccess(width, height, benchmark) {\n                /* istanbul ignore else */\n                if (settings.onSuccess) {\n                    settings.onSuccess(width, height, benchmark);\n                }\n\n                resolve({ width, height, benchmark });\n            }\n        });\n\n        canvasTest(newSettings);\n    });\n}\n\nexport { canvasTest, canvasTestPromise };\n","import { canvasTest, canvasTestPromise } from './canvas-test.js';\n\n// Constants & Variables\n// =============================================================================\nconst defaults = {\n    max       : null,\n    min       : 1,\n    sizes     : [],\n    step      : 1024,\n    usePromise: false,\n    // Callbacks\n    onError   : Function.prototype,\n    onSuccess : Function.prototype\n};\nconst testSizes = {\n    area: [\n        // Future Browsers?\n        32767,\n        // Chrome 70 (Mac, Win)\n        // Chrome 68 (Android 4.4)\n        // Edge 17 (Win)\n        // Safari 7-12 (Mac)\n        16384,\n        // Chrome 68 (Android 7.1-9)\n        14188,\n        // Chrome 68 (Android 5),\n        11402,\n        // Chrome 68 (Android 6)\n        10836,\n        // Firefox 63 (Mac, Win)\n        11180,\n        // IE 9-11 (Win)\n        8192,\n        // IE Mobile (Windows Phone 8.x)\n        // Safari (iOS 9 - 12)\n        4096,\n        // Failed\n        defaults.min\n    ],\n    height: [\n        // Safari 7-12 (Mac)\n        // Safari (iOS 9-12)\n        8388607,\n        // Chrome 83 (Mac, Win)\n        65535,\n        // Chrome 70 (Mac, Win)\n        // Chrome 68 (Android 4.4-9)\n        // Firefox 63 (Mac, Win)\n        32767,\n        // IE11\n        // Edge 17 (Win)\n        16384,\n        // IE 9-10 (Win)\n        8192,\n        // IE Mobile (Windows Phone 8.x)\n        4096,\n        // Failed\n        defaults.min\n    ],\n    width: [\n        // Safari 7-12 (Mac)\n        // Safari (iOS 9-12)\n        4194303,\n        // Chrome 83 (Mac, Win)\n        65535,\n        // Chrome 70 (Mac, Win)\n        // Chrome 68 (Android 4.4-9)\n        // Firefox 63 (Mac, Win)\n        32767,\n        // IE11\n        // Edge 17 (Win)\n        16384,\n        // IE 9-10 (Win)\n        8192,\n        // IE Mobile (Windows Phone 8.x)\n        4096,\n        // Failed\n        defaults.min\n    ]\n};\n\n\n// Functions (Private)\n// =============================================================================\n/**\n * Creates a 2d array of canvas dimensions either from the default testSizes\n * object or the width/height/min/step values provided.\n *\n * @param   {object} settings\n * @param   {number} settings.width\n * @param   {number} settings.height\n * @param   {number} settings.min\n * @param   {number} settings.step\n * @param   {number[][]} settings.sizes\n * @returns {number[][]}\n */\nfunction createSizesArray(settings) {\n    const isArea   = settings.width === settings.height;\n    const isWidth  = settings.height === 1;\n    const isHeight = settings.width === 1;\n    const sizes    = [];\n\n    // Use settings.sizes\n    if (!settings.width || !settings.height) {\n        settings.sizes.forEach(testSize => {\n            const width  = isArea || isWidth ? testSize : 1;\n            const height = isArea || isHeight ? testSize : 1;\n\n            sizes.push([width, height]);\n        });\n    }\n    // Generate sizes from width, height, and step\n    else {\n        const testMin  = settings.min || defaults.min;\n        const testStep = settings.step || defaults.step;\n        let   testSize = Math.max(settings.width, settings.height);\n\n        while (testSize >= testMin) {\n            const width  = isArea || isWidth ? testSize : 1;\n            const height = isArea || isHeight ? testSize : 1;\n\n            sizes.push([width, height]);\n            testSize -= testStep;\n        }\n    }\n\n    return sizes;\n}\n\n\n// Methods\n// =============================================================================\nconst canvasSize = {\n    /**\n     * Determines maximum area of an HTML canvas element. When `max` is\n     * unspecified, an optimized test will be performed using known maximum\n     * values from a variety of browsers and platforms.\n     *\n     * @param {object} [options]\n     * @param {number} [options.max]\n     * @param {number} [options.min=1]\n     * @param {number} [options.step=1024]\n     * @param {boolean} [options.usePromise=false]\n     * @param {function} [options.onError]\n     * @param {function} [options.onSuccess]\n     */\n    maxArea(options = {}) {\n        const sizes = createSizesArray({\n            width : options.max,\n            height: options.max,\n            min   : options.min,\n            step  : options.step,\n            sizes : [...testSizes.area]\n        });\n        const settings = Object.assign({}, defaults, options, { sizes });\n\n        if (settings.usePromise) {\n            return canvasTestPromise(settings);\n        }\n        else {\n            canvasTest(settings);\n        }\n    },\n\n    /**\n     * Determines maximum height of an HTML canvas element. When `max` is\n     * unspecified, an optimized test will be performed using known maximum\n     * values from a variety of browsers and platforms.\n     *\n     * @param {object} [options]\n     * @param {number} [options.max]\n     * @param {number} [options.min=1]\n     * @param {number} [options.step=1024]\n     * @param {boolean} [options.usePromise=false]\n     * @param {function} [options.onError]\n     * @param {function} [options.onSuccess]\n     */\n    maxHeight(options = {}) {\n        const sizes = createSizesArray({\n            width : 1,\n            height: options.max,\n            min   : options.min,\n            step  : options.step,\n            sizes : [...testSizes.height]\n        });\n        const settings = Object.assign({}, defaults, options, { sizes });\n\n        if (settings.usePromise) {\n            return canvasTestPromise(settings);\n        }\n        else {\n            canvasTest(settings);\n        }\n    },\n\n    /**\n     * Determines maximum width of an HTML canvas element. When `max` is\n     * unspecified, an optimized test will be performed using known maximum\n     * values from a variety of browsers and platforms.\n     *\n     * @param {object} [options]\n     * @param {number} [options.max]\n     * @param {number} [options.min=1]\n     * @param {number} [options.step=1024]\n     * @param {boolean} [options.usePromise=false]\n     * @param {function} [options.onError]\n     * @param {function} [options.onSuccess]\n     */\n    maxWidth(options = {}) {\n        const sizes = createSizesArray({\n            width : options.max,\n            height: 1,\n            min   : options.min,\n            step  : options.step,\n            sizes : [...testSizes.width]\n        });\n        const settings = Object.assign({}, defaults, options, { sizes });\n\n        if (settings.usePromise) {\n            return canvasTestPromise(settings);\n        }\n        else {\n            canvasTest(settings);\n        }\n    },\n\n    /**\n     * Tests ability to read pixel data from canvas of specified dimension(s).\n     *\n     * @param {object} [options]\n     * @param {number} [options.width]\n     * @param {number} [options.height]\n     * @param {number[][]} [options.sizes]\n     * @param {boolean} [options.usePromise=false]\n     * @param {function} [options.onError]\n     * @param {function} [options.onSuccess]\n     */\n    test(options = {}) {\n        const settings = Object.assign({}, defaults, options);\n\n        // Prevent mutation of sizes array if referencing user array\n        settings.sizes = [...settings.sizes];\n\n        if (settings.width && settings.height) {\n            settings.sizes = [[settings.width, settings.height]];\n        }\n\n        if (settings.usePromise) {\n            return canvasTestPromise(settings);\n        }\n        else {\n            return canvasTest(settings);\n        }\n    }\n};\n\n\n// Exports\n// =============================================================================\nexport default canvasSize;"],"names":["cropCvs","cropCtx","testCvs","testCtx","hasCanvasSupport","window","HTMLCanvasElement","canvasTest","settings","width","height","sizes","shift","fill","job","Date","now","fillRect","apply","drawImage","isTestPass","Boolean","getImageData","data","benchmark","onSuccess","onError","length","requestAnimationFrame","canvasTestPromise","Promise","resolve","reject","Object","assign","document","createElement","getContext","defaults","max","min","step","usePromise","Function","prototype","testSizes","area","createSizesArray","isArea","isWidth","isHeight","testMin","testStep","testSize","Math","push","forEach","canvasSize","maxArea","options","maxHeight","maxWidth","test"],"mappings":"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"}