{"version":3,"file":"canvas-size.esm.min.js","sources":["../src/index.js","../src/worker.js"],"sourcesContent":["import canvasWorker from './worker.js';\n\n\n// Constants & Variables\n// =============================================================================\nconst defaults = {\n    max  : null,\n    min  : 1,\n    sizes: [],\n    step : 1024,\n    // Callbacks\n    onError  : Function.prototype,\n    onSuccess: Function.prototype\n};\nconst testSizes = {\n    area: [\n        // Chrome 70 (Mac, Win)\n        // Chrome 68 (Android 4.4)\n        // Edge 17 (Win)\n        // Safari 7-12 (Mac)\n        16384,\n        // Chrome 68 (Android 7.1-9)\n        14188,\n        // Chrome 68 (Android 5),\n        11402,\n        // Chrome 68 (Android 6)\n        10836,\n        // Firefox 63 (Mac, Win)\n        11180,\n        // IE 9-11 (Win)\n        8192,\n        // IE Mobile (Windows Phone 8.x)\n        // Safari (iOS 9 - 12)\n        4096,\n        // Failed\n        defaults.min\n    ],\n    height: [\n        // Safari 7-12 (Mac)\n        // Safari (iOS 9-12)\n        8388607,\n        // Chrome 70 (Mac, Win)\n        // Chrome 68 (Android 4.4-9)\n        // Firefox 63 (Mac, Win)\n        32767,\n        // IE11\n        // Edge 17 (Win)\n        16384,\n        // IE 9-10 (Win)\n        8192,\n        // IE Mobile (Windows Phone 8.x)\n        4096,\n        // Failed\n        defaults.min\n    ],\n    width: [\n        // Safari 7-12 (Mac)\n        // Safari (iOS 9-12)\n        4194303,\n        // Chrome 70 (Mac, Win)\n        // Chrome 68 (Android 4.4-9)\n        // Firefox 63 (Mac, Win)\n        32767,\n        // IE11\n        // Edge 17 (Win)\n        16384,\n        // IE 9-10 (Win)\n        8192,\n        // IE Mobile (Windows Phone 8.x)\n        4096,\n        // Failed\n        defaults.min\n    ]\n};\n\n// Web worker reference\nlet worker;\n\n// Generate inline web worker\nif (window && ('OffscreenCanvas' in window) && ('Worker' in window)) {\n    const createWorker = fn => {\n        const js      = `(${fn.toString()})()`;\n        const blob    = new Blob([js], { type: 'application/javascript' });\n        const blobURL = URL.createObjectURL(blob);\n        const worker  = new Worker(blobURL);\n\n        URL.revokeObjectURL(blobURL);\n\n        return worker;\n    };\n\n    worker = createWorker(canvasWorker);\n    worker.onmessage = function(e) {\n        console.log('Done (Worker)', e.data);\n\n        const { width, height, job, result } = e.data;\n\n        document.dispatchEvent(\n            // Dispatch custom event\n            new CustomEvent(job, {\n                detail: {\n                    height,\n                    width,\n                    result\n                }\n            })\n        );\n    };\n}\n\n\n// Functions (Private)\n// =============================================================================\n/**\n * Tests ability to read pixel data from a canvas at a specified dimension.\n *\n * @param {object} settings\n * @param {number} settings.width\n * @param {number} settings.height\n * @param {function} settings.onError\n * @param {function} settings.onSuccess\n *\n * @returns {boolean}\n */\nfunction canvasTest(settings) {\n    const { width, height } = settings;\n    const w = 1; // Width\n    const h = 1; // Height\n    const x = width - 1;  // Right edge\n    const y = height - 1; // Bottom edge\n\n    // Web worker\n    if (worker) {\n        console.log('Worker');\n\n        const cvs = new OffscreenCanvas(width, height);\n        const job = Date.now();\n\n        // Listen for custom job event\n        document.addEventListener(job, function(e) {\n            console.log('Done (Listener)', e.detail);\n\n            const { width, height, result } = e.detail;\n\n            if (result) {\n                settings.onSuccess(width, height);\n            }\n            else {\n                settings.onError(width, height);\n            }\n        }, false);\n\n        // Send canvas reference and test data to web worker\n        worker.postMessage({\n            cvs,\n            fill: [x, y, w, h],\n            height,\n            job,\n            width\n        }, [cvs]);\n    }\n    else {\n        try {\n            console.log('Non-Worker');\n\n            const cvs = document.createElement('canvas');\n            const ctx = cvs.getContext('2d');\n\n            cvs.width = width;\n            cvs.height = height;\n            ctx.fillRect(x, y, w, h);\n\n            // Verify test rectangle image data (Pass = 255, Fail = 0)\n            if (ctx.getImageData(x, y, w, h).data[3]) {\n                settings.onSuccess(width, height);\n            }\n            else {\n                settings.onError(width, height);\n            }\n        }\n        catch(e){\n            settings.onError(width, height);\n        }\n    }\n}\n\n/**\n * Tests ability to read pixel data from canvas elements of various dimensions\n * by decreasing canvas height and/or width until a test succeeds.\n *\n * @param {object} settings\n * @param {number[][]} settings.sizes\n * @param {function} settings.onError\n * @param {function} settings.onSuccess\n */\nfunction canvasTestLoop(settings) {\n    const sizes    = settings.sizes.shift();\n    const width    = sizes[0];\n    const height   = sizes[1];\n    const testPass = canvasTest(width, height);\n\n    if (testPass) {\n        settings.onSuccess(width, height);\n    }\n    else {\n        settings.onError(width, height);\n\n        if (settings.sizes.length) {\n            setTimeout(function(){\n                canvasTestLoop(settings);\n            }, 0);\n        }\n    }\n}\n\n/**\n * Creates a 2d array of canvas dimensions either from the default testSizes\n * object or the width/height/min/step values provided.\n *\n * @param   {object} settings\n * @param   {number} settings.width\n * @param   {number} settings.height\n * @param   {number} settings.min\n * @param   {number} settings.step\n * @param   {number[][]} settings.sizes\n * @returns {number[][]}\n */\nfunction createSizesArray(settings) {\n    const isArea   = settings.width === settings.height;\n    const isWidth  = settings.height === 1;\n    const isHeight = settings.width === 1;\n    const sizes    = [];\n\n    // Use settings.sizes\n    if (!settings.width || !settings.height) {\n        settings.sizes.forEach(testSize => {\n            const width  = isArea || isWidth ? testSize : 1;\n            const height = isArea || isHeight ? testSize : 1;\n\n            sizes.push([width, height]);\n        });\n    }\n    // Generate sizes from width, height, and step\n    else {\n        const testMin  = settings.min || defaults.min;\n        const testStep = settings.step || defaults.step;\n        let   testSize = Math.max(settings.width, settings.height);\n\n        while (testSize > testMin) {\n            const width  = isArea || isWidth ? testSize : 1;\n            const height = isArea || isHeight ? testSize : 1;\n\n            sizes.push([width, height]);\n            testSize -= testStep;\n        }\n\n        sizes.push([testMin, testMin]);\n    }\n\n    return sizes;\n}\n\n\n// Methods\n// =============================================================================\nconst canvasSize = {\n    /**\n     * Determines maximum area of an HTML canvas element. When `max` is\n     * unspecified, an optimized test will be performed using known maximum\n     * values from a variety of browsers and platforms.\n     *\n     * @param {object} [options]\n     * @param {number} [options.max]\n     * @param {number} [options.min=1]\n     * @param {number} [options.step=1024]\n     * @param {function} [options.onError]\n     * @param {function} [options.onSuccess]\n     */\n    maxArea(options = {}) {\n        const sizes = createSizesArray({\n            width : options.max,\n            height: options.max,\n            min   : options.min,\n            step  : options.step,\n            sizes : [...testSizes.area]\n        });\n        const settings = Object.assign({}, defaults, options, { sizes });\n\n        canvasTestLoop(settings);\n    },\n\n    /**\n     * Determines maximum height of an HTML canvas element. When `max` is\n     * unspecified, an optimized test will be performed using known maximum\n     * values from a variety of browsers and platforms.\n     *\n     * @param {object} [options]\n     * @param {number} [options.max]\n     * @param {number} [options.min=1]\n     * @param {number} [options.step=1024]\n     * @param {function} [options.onError]\n     * @param {function} [options.onSuccess]\n     */\n    maxHeight(options = {}) {\n        const sizes = createSizesArray({\n            width : 1,\n            height: options.max,\n            min   : options.min,\n            step  : options.step,\n            sizes : [...testSizes.height]\n        });\n        const settings = Object.assign({}, defaults, options, { sizes });\n\n        canvasTestLoop(settings);\n    },\n\n    /**\n     * Determines maximum width of an HTML canvas element. When `max` is\n     * unspecified, an optimized test will be performed using known maximum\n     * values from a variety of browsers and platforms.\n     *\n     * @param {object} [options]\n     * @param {number} [options.max]\n     * @param {number} [options.min=1]\n     * @param {number} [options.step=1024]\n     * @param {function} [options.onError]\n     * @param {function} [options.onSuccess]\n     */\n    maxWidth(options = {}) {\n        const sizes = createSizesArray({\n            width : options.max,\n            height: 1,\n            min   : options.min,\n            step  : options.step,\n            sizes : [...testSizes.width]\n        });\n        const settings = Object.assign({}, defaults, options, { sizes });\n\n        canvasTestLoop(settings);\n    },\n\n    /**\n     * Tests ability to read pixel data from canvas of specified dimension(s).\n     *\n     * @param {object} [options]\n     * @param {number} [options.width]\n     * @param {number} [options.height]\n     * @param {number[][]} [options.sizes]\n     * @param {function} [options.onError]\n     * @param {function} [options.onSuccess]\n     * @returns {boolean} Returns boolean when width/height is set (not sizes)\n     */\n    test(options = {}) {\n        const settings = Object.assign({}, defaults, options);\n\n        if (settings.sizes.length) {\n            settings.sizes = [...options.sizes];\n            canvasTestLoop(settings);\n        }\n        else {\n            const testPass = canvasTest(settings);\n\n            return testPass;\n        }\n    }\n};\n\n\n// Exports\n// =============================================================================\nexport default canvasSize;","/* istanbul ignore next */\nexport default function() {\n    function workerCanvasTest(settings) {\n        const { job, cvs, width, height, fill } = settings;\n        const ctx = cvs.getContext('2d');\n\n        ctx.fillRect.apply(ctx, fill);\n        self.postMessage({\n            job,\n            width,\n            height,\n            // Verify image data (Pass = 255, Fail = 0)\n            result: Boolean(ctx.getImageData.apply(ctx, fill).data[3])\n        });\n    }\n\n    self.onmessage = function(e) {\n        workerCanvasTest(e.data);\n    };\n}\n"],"names":["worker","defaults","max","min","sizes","step","onError","Function","prototype","onSuccess","testSizes","area","height","width","window","fn","js","toString","blob","Blob","type","blobURL","URL","createObjectURL","Worker","revokeObjectURL","createWorker","self","onmessage","e","settings","job","cvs","fill","ctx","getContext","fillRect","apply","postMessage","result","Boolean","getImageData","data","workerCanvasTest","console","log","document","dispatchEvent","CustomEvent","detail","canvasTest","x","y","OffscreenCanvas","Date","now","addEventListener","createElement","canvasTestLoop","shift","length","setTimeout","createSizesArray","isArea","isWidth","isHeight","testMin","testStep","testSize","Math","push","forEach","canvasSize","maxArea","options","Object","assign","maxHeight","maxWidth","test"],"mappings":"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"}